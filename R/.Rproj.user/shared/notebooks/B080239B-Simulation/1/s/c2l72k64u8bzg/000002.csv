"0","##############################################################################"
"0","##Function to build predictor set for each i individual stock, and each time t"
"0","##############################################################################"
"0","###Note that the format of the list/matrix is different from previously so that it can be fed into algorithms more easily"
"0","###Instead of t denoting the list, it is now the row number of the matrix containing all predictors"
"0","###This should make it very easy to reconcile with the return series"
"0","#Our P_x is 1 constant + 3 multivariate time series = 4"
"0","#Hence, ncol = 4*P_c"
"0","gen_z <- function(){"
"0","  null_matrix <- matrix(0, nrow = Time+1, ncol = 4*P_c)"
"0","  z <- rep(list(null_matrix), N)"
"0","  "
"0","  xt <- gen_xt(A1)"
"0","  "
"0","  for (i in 1:N) {"
"0","    for (t in 1:(Time+1)){"
"0","      z[[i]][t, ] <- t("
"0","        kronecker(t(cbind(c(rep(1, Time+1)), xt)[t, ]), C[[t]][i, ])"
"0","        )"
"0","    }"
"0","  }"
"0","  return(z)"
"0","}"
"0","############################################################################"
"0","##Function to cbind the corresponding return series and the predictor set together, and return it in dataframe form"
"0","############################################################################"
"0","gen_pooled_panel <- function(){"
"0","  "
"0","  #Initialize entire dataset dimensions"
"0","  #There should be 181*200 = 36,200 rows"
"0","  #There should be 1 return column + 1 id column + 1 time column + 400 predictors = 403 columns"
"0","  "
"0","  pooled_panel <- matrix(data = 0, nrow = (181*200), ncol = (1+1+1+400))"
"0","  "
"0","  for (i in 1:N){"
"0","    #Extract return series for ith stock from the return series list first"
"0","    #Initialize empty matrix"
"0","    r <- matrix(0, nrow = Time+1, ncol = 1)"
"0","    "
"0","    for (t in 1:(Time+1)){"
"0","        r[t] <- rt_A1_g1[[t]][i]"
"0","    }"
"0","    "
"0","    #Cbind returns, id, time and predictors"
"0","    panel <- cbind(r, c(rep(i, (Time+1))), c(1:(Time+1)), z[[i]])"
"0","    pooled_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel"
"0","  }"
"0","  "
"0","  #Pass this through to data frame format with column titles so you know which column is which"
"0","  pooled_panel <- data.frame(return = pooled_panel[, 1], stock = pooled_panel[, 2], time = pooled_panel[, 3], pooled_panel[, 4:403])"
"0","  "
"0","  #Sort by time"
"0","  pooled_panel <- pooled_panel %>%"
"0","  arrange(time)"
"0","  "
"0","  #Remove 1st row because returns data only starts from t = 2"
"0","  pooled_panel <- pooled_panel %>%"
"0","    filter(time != 1)"
"0","  "
"0","  #Return"
"0","  return(pooled_panel)"
"0","  "
"0","}"
