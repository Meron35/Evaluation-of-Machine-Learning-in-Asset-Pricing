all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
top_n(3, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
top_n(10, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
top_n(10, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
top_n(4, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(model) %>%
top_n(5, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(model) %>%
top_n(10, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(model) %>%
top_n(50, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(model) %>%
top_n(20, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
group_by(model) %>%
top_n(25, importance) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
g1_A1_nosv_0_results[[1]]$ELN_MSE[[1]]$hyperparameters
get_eln_hyper_df <- function(simulation_results_list) {
foreach(realization = 1:10, sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization, sample = sample,
model = "ELN_MAE",
simulation_results_list[[realization]]ELN_stats_mae[[sample]]$hyperparameters),
get_eln_hyper_df <- function(simulation_results_list) {
foreach(realization = 1:10, sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization, sample = sample,
model = "ELN_MAE",
simulation_results_list[[realization]]ELN_stats_mae[[sample]]$hyperparameters),
get_eln_hyper_df <- function(simulation_results_list) {
foreach(realization = 1:10, sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization, sample = sample,
model = "ELN_MAE",
simulation_results_list[[realization]]ELN_stats_mae[[sample]]$hyperparameters),
get_eln_hyper_df <- function(simulation_results_list, dgp_spec) {
foreach(realization = 1:10, sample = 1:3, .combine = "rbind") %do% {
cbind(model = dgp_spec,
rbind(realization = realization, sample = sample, model = ELN_MSE,
simulation_results_list[[realization]]$ELN_MSE[[sample]]$hyperparameters),
rbind(realization = realization, sample = sample, model = ELN_MAE,
simulation_results_list[[realization]]$ELN_MAE[[sample]]$hyperparameters)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, dgp_spec = "g1")
get_eln_hyper_df <- function(simulation_results_list, dgp_spec) {
foreach(realization = 1:10, sample = 1:3, .combine = "rbind") %do% {
cbind(model = dgp_spec,
rbind(realization = realization, sample = sample, model = ELN_MSE,
simulation_results_list[[realization]]$ELN_MSE[[sample]]$hyperparameters),
rbind(realization = realization, sample = sample, model = ELN_MAE,
simulation_results_list[[realization]]$ELN_MAE[[sample]]$hyperparameters)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, dgp_spec = "g1")
get_eln_hyper_df <- function(simulation_results_list, realization_no, dgp_spec, SV, cross_corr) {
foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MSE",
simulation_results_list[[realization_no]]$ELN_MSE),
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MAE",
simulation_results_list[[realization_no]]$ELN_MAE)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, 1, "g1", 0, 0)
get_eln_hyper_df <- function(simulation_results_list, realization_no, dgp_spec, SV, cross_corr) {
foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MSE",
simulation_results_list[[realization_no]]$ELN_MSE$hyperparameters),
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MAE",
simulation_results_list[[realization_no]]$ELN_MAE$hyperparameters)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, 1, "g1", 0, 0)
get_eln_hyper_df <- function(simulation_results_list, realization_no, dgp_spec, SV, cross_corr) {
foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MSE",
simulation_results_list[[realization_no]]$ELN_MSE[[sample]]$hyperparameters),
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MAE",
simulation_results_list[[realization_no]]$ELN_MAE[[sample]]$hyperparameters)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, 1, "g1", 0, 0)
get_eln_hyper_df <- function(simulation_results_list, dgp_spec, SV, cross_corr) {
foreach(realization_no = 1:10, sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MSE",
simulation_results_list[[realization_no]]$ELN_MSE[[sample]]$hyperparameters),
cbind(realization_no = realization_no, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MAE",
simulation_results_list[[realization_no]]$ELN_MAE[[sample]]$hyperparameters)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, "g1", 0, 0)
get_eln_hyper_df <- function(simulation_results_list, dgp_spec, SV, cross_corr) {
foreach(realization_no = 1:10, sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, sample = sample, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MSE",
simulation_results_list[[realization_no]]$ELN_MSE[[sample]]$hyperparameters),
cbind(realization_no = realization_no, sample = sample, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MAE",
simulation_results_list[[realization_no]]$ELN_MAE[[sample]]$hyperparameters)
)
}
}
get_eln_hyper_df(g1_A1_nosv_0_results, "g1", 0, 0)
iterate_over_realization <- function(simulation_results_list) {
foreach(realization_no = 1:10, .combine = "rbind") %do% {
get_eln_hyper_df(simulation_results_list)
}
}
iterate_over_realization(g1_A1_nosv_0_results)
iterate_over_realization <- function(simulation_results_list, dgp_spec, SV, cross_corr) {
foreach(realization_no = 1:10, .combine = "rbind") %do% {
get_eln_hyper_df(simulation_results_list, realization_no = realization_no, dgp_spec, SV, cross_corr)
}
}
iterate_over_realization(g1_A1_nosv_0_results)
get_eln_hyper_df <- function(simulation_results_list, realization_no, dgp_spec, SV, cross_corr) {
foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, sample = sample, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MSE",
simulation_results_list[[realization_no]]$ELN_MSE[[sample]]$hyperparameters),
cbind(realization_no = realization_no, sample = sample, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "ELN_MAE",
simulation_results_list[[realization_no]]$ELN_MAE[[sample]]$hyperparameters)
)
}
}
iterate_over_realization <- function(simulation_results_list, dgp_spec, SV, cross_corr) {
foreach(realization_no = 1:10, .combine = "rbind") %do% {
get_eln_hyper_df(simulation_results_list, realization_no = realization_no, dgp_spec, SV, cross_corr)
}
}
iterate_over_realization(g1_A1_nosv_0_results)
iterate_over_realization(g1_A1_nosv_0_results, "g1", 1, 0)
eln_hyperparameters_df <- rbind(
iterate_over_realization(g1_A1_nosv_0_results, "g1", 0, 0),
iterate_over_realization(g2_A1_nosv_0_results, "g2", 0, 0),
iterate_over_realization(g3_A1_nosv_0_results, "g3", 0, 0),
iterate_over_realization(g1_A1_sv_0.01_results, "g1", 1, 0.01),
iterate_over_realization(g2_A1_sv_0.01_results, "g2", 1, 0.01),
iterate_over_realization(g3_A1_sv_0.01_results, "g3", 1, 0.01),
iterate_over_realization(g1_A1_sv_0.1_results, "g1", 1, 0.1),
iterate_over_realization(g2_A1_sv_0.1_results, "g2", 1, 0.1),
iterate_over_realization(g3_A1_sv_0.1_results, "g3", 1, 0.1),
iterate_over_realization(g1_A1_sv_1_results, "g1", 1, 1),
iterate_over_realization(g2_A1_sv_1_results, "g2", 1, 1),
iterate_over_realization(g3_A1_sv_1_results, "g3", 1, 1),
)
eln_hyperparameters_df <- rbind(
iterate_over_realization(g1_A1_nosv_0_results, "g1", 0, 0),
iterate_over_realization(g2_A1_nosv_0_results, "g2", 0, 0),
iterate_over_realization(g3_A1_nosv_0_results, "g3", 0, 0),
iterate_over_realization(g1_A1_sv_0.01_results, "g1", 1, 0.01),
iterate_over_realization(g2_A1_sv_0.01_results, "g2", 1, 0.01),
iterate_over_realization(g3_A1_sv_0.01_results, "g3", 1, 0.01),
iterate_over_realization(g1_A1_sv_0.1_results, "g1", 1, 0.1),
iterate_over_realization(g2_A1_sv_0.1_results, "g2", 1, 0.1),
iterate_over_realization(g3_A1_sv_0.1_results, "g3", 1, 0.1),
iterate_over_realization(g1_A1_sv_1_results, "g1", 1, 1),
iterate_over_realization(g2_A1_sv_1_results, "g2", 1, 1),
iterate_over_realization(g3_A1_sv_1_results, "g3", 1, 1)
)
View(eln_hyperparameters_df)
eln_hyperparameters_df %>%
ggplot() +
geom_point(aes(x = sample, y = alpha))
eln_hyperparameters_df %>%
mutate(sample = as.factor(sample)) %>%
ggplot() +
geom_point(aes(x = sample, y = alpha))
eln_hyperparameters_df %>%
mutate(sample = as.factor(sample)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha))
?geom_line
eln_hyperparameters_df %>%
ggplot() +
geom_line(aes(x = sample, y = alpha))
View(eln_hyperparameters_df)
eln_hyperparameters_df %>%
group_by(mode, dgp_spec, SV, cross_corr) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha))
eln_hyperparameters_df %>%
group_by(model, dgp_spec, SV, cross_corr) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha))
eln_hyperparameters_df %>%
group_by(realization_no, model, dgp_spec, SV, cross_corr) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha))
eln_hyperparameters_df %>%
group_by(realization_no, model, dgp_spec, SV, cross_corr) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group))
eln_hyperparameters_df %>%
group_by(realization_no, model, dgp_spec, SV, cross_corr) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_by(realization_no, model, dgp_spec, SV, cross_corr)))
eln_hyperparameters_df %>%
group_indices(realization_no, model, dgp_spec, SV, cross_corr) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = ))
?group_indices
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = ))
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_id))
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_id, fill = group_id))
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_id, colour = group_id))
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_id, colour = group_id))
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_id, colour = group_id)) +
theme(legend.position = "none")
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = alpha, group = group_id, colour = group_id)) +
theme_bw() +
theme(legend.position = "none")
## Lambda Value Plot
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = lambda, group = group_id, colour = group_id)) +
theme_bw() +
theme(legend.position = "none")
get_rf_hyper_df <- function(simulation_results_list, realization_no, dgp_spec, SV, cross_corr) {
foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(realization_no = realization_no, sample = sample, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "RF_MSE",
simulation_results_list[[realization_no]]$RF_MSE[[sample]]$hyperparameters),
cbind(realization_no = realization_no, sample = sample, dgp_spec = dgp_spec, SV = SV, cross_corr = cross_corr, model = "RF_MAE",
simulation_results_list[[realization_no]]$RF_MAE[[sample]]$hyperparameters)
)
}
}
iterate_over_realization <- function(simulation_results_list, dgp_spec, SV, cross_corr) {
foreach(realization_no = 1:10, .combine = "rbind") %do% {
get_rf_hyper_df(simulation_results_list, realization_no = realization_no, dgp_spec, SV, cross_corr)
}
}
rf_hyperparameters_df <- rbind(
iterate_over_realization(g1_A1_nosv_0_results, "g1", 0, 0),
iterate_over_realization(g2_A1_nosv_0_results, "g2", 0, 0),
iterate_over_realization(g3_A1_nosv_0_results, "g3", 0, 0),
iterate_over_realization(g1_A1_sv_0.01_results, "g1", 1, 0.01),
iterate_over_realization(g2_A1_sv_0.01_results, "g2", 1, 0.01),
iterate_over_realization(g3_A1_sv_0.01_results, "g3", 1, 0.01),
iterate_over_realization(g1_A1_sv_0.1_results, "g1", 1, 0.1),
iterate_over_realization(g2_A1_sv_0.1_results, "g2", 1, 0.1),
iterate_over_realization(g3_A1_sv_0.1_results, "g3", 1, 0.1),
iterate_over_realization(g1_A1_sv_1_results, "g1", 1, 1),
iterate_over_realization(g2_A1_sv_1_results, "g2", 1, 1),
iterate_over_realization(g3_A1_sv_1_results, "g3", 1, 1)
)
eln_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = ntree, group = group_id, colour = group_id)) +
theme_bw() +
theme(legend.position = "none")
rf_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = ntree, group = group_id, colour = group_id)) +
theme_bw() +
theme(legend.position = "none")
rf_hyperparameters_df
rf_hyperparameters_df %>%
mutate(group_id = group_indices(., realization_no, model, dgp_spec, SV, cross_corr)) %>%
mutate(group_id = as.factor(group_id)) %>%
ggplot() +
geom_line(aes(x = sample, y = mtry, group = group_id, colour = group_id)) +
theme_bw() +
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g1_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g1_A1_sv_0.1.RDS")
g1_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g1_A1_sv_0.1.RDS")
g2_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g2_A1_sv_0.1.RDS")
g3_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g3_A1_sv_0.1.RDS")
batch_process_range <- c(1:1)
g1_A1_sv_0.1_NN_results <- fit_all_models(g1_A1_sv_0.1, batch_process_range, LM = 0, ELN = 0, RF = 0, NNet = 1)
fit_all_models <- function(dataset_list, batch_process_range,
# Logical arguments specifying which models you want to fit
# This is useful if you don't want to fit some of the most intensive methods such as RF and Neural Networks
LM, ELN, RF, NNet) {
# Initialize List
simulation_results_list <- rep(list(0), length(batch_process_range))
for (batch in (batch_process_range)) {
simulation_results_list[[batch]] <- list(
# Panel Statistics
Dataset_stats = 0,
# Models
LM_MSE = 0, LM_MAE = 0,
ELN_MSE = 0, ELN_MAE = 0,
RF_MSE = 0, RF_MAE = 0,
# Neural Networks
NN1_MSE = 0, NN1_MAE = 0,
NN2_MSE = 0, NN2_MAE = 0,
NN3_MSE = 0, NN3_MAE = 0,
NN4_MSE = 0, NN4_MAE = 0,
NN5_MSE = 0, NN5_MAE = 0
)
# Load Dataset
pooled_panel <- dataset_list[[batch]]$panel
simulation_results_list[[batch]]$Dataset_stats <- dataset_list[[batch]]$statistics
simulation_results_list[[batch]]$returns <- pooled_panel$rt
timeSlices <- customTimeSlices(start = 2, initialWindow = 84, horizon = 12, validation_size = 60, test_size = 12, set_no = 3)
f <- panel_formula(pooled_panel)
if (LM == 1) {
# Linear Models
simulation_results_list[[batch]]$LM_MSE <- LM_fit(pooled_panel, timeSlices, "mse", f)
simulation_results_list[[batch]]$LM_MAE <- LM_fit(pooled_panel, timeSlices, "mae", f)
}
if (ELN == 1) {
# Penalized Linear Models
alpha_grid <- seq(0, 1, 0.01)
simulation_results_list[[batch]]$ELN_MAE <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mae")
simulation_results_list[[batch]]$ELN_MSE <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
}
if (RF == 1) {
# Random Forests
RF_grid <- expand.grid(
#ntree usually isn't tuned. Just set to max of computationally feasible
ntree = 50,
mtry = seq(10, ncol(pooled_panel[4:ncol(pooled_panel)])/4, 10)
# nodesize = seq(2, 14, 2)
# nodedepth recommended not to be changed
#nodedepth = 1
)
simulation_results_list[[batch]]$RF_MSE <- RF_fit_stats(pooled_panel, RF_grid, timeSlices, "mse", f)
simulation_results_list[[batch]]$RF_MAE <- RF_fit_stats(pooled_panel, RF_grid, timeSlices, "mae", f)
}
if (NNet == 1) {
# Neural Networks
# Commented for now because honours lab computers don't have keras/tensorflow
batch_size <- 32
patience <- 20
simulation_results_list[[batch]]$NN1_MSE <- NNet_fit_stats(pooled_panel, timeSlices, 1, "mse", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN1_MAE <- NNet_fit_stats(pooled_panel, timeSlices, 1, "mae", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN2_MSE <- NNet_fit_stats(pooled_panel, timeSlices, 2, "mse", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN2_MAE <- NNet_fit_stats(pooled_panel, timeSlices, 2, "mae", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN3_MSE <- NNet_fit_stats(pooled_panel, timeSlices, 3, "mse", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN3_MAE <- NNet_fit_stats(pooled_panel, timeSlices, 3, "mae", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN4_MSE <- NNet_fit_stats(pooled_panel, timeSlices, 4, "mse", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN4_MAE <- NNet_fit_stats(pooled_panel, timeSlices, 4, "mae", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN5_MSE <- NNet_fit_stats(pooled_panel, timeSlices, 5, "mse", batch_size = batch_size, patience = patience)
simulation_results_list[[batch]]$NN5_MAE <- NNet_fit_stats(pooled_panel, timeSlices, 5, "mae", batch_size = batch_size, patience = patience)
}
}
simulation_results_list
}
g1_A1_sv_0.1_NN_results <- fit_all_models(g1_A1_sv_0.1, batch_process_range, LM = 0, ELN = 0, RF = 0, NNet = 1)
install_tensorflow()
install_keras()
