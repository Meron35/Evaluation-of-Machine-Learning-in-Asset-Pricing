"0","############################################################################"
"0","##Function to generate return series + its residuals given specification of A and g function"
"0","############################################################################"
"0","#This generates beta, v vector of errors, and the epsilon errors, then binds them together for the final error term"
"0","gen_rt_resid <- function(omega, gamma, w, v_sd){"
"0","#  elp <- matrix(0, nrow = N, ncol = 1)"
"0","  "
"0","#  resid <- rep(list(elp), Time+1)"
"0","  "
"0","  ##############################"
"0","  Beta <- gen_Beta()"
"0","  v <- gen_v(v_sd)"
"0","  error <- matrix( rnorm(N*(Time+1),mean=0,sd=1), N, (Time+1))*.05 "
"0","  ##############################"
"0","  resid<-matrix(0,N,(Time+1))"
"0","  for (i in 1:N){"
"0","  resid[i,] <- rowSums(t(as.matrix(Beta[i,,]))*v) + error[i,]"
"0","  }"
"0","#  for (t in 1:(Time)) {"
"0"," #   for (i in 1:N){"
"0","#      resid[[t]][i] <- Beta[[t]][i, ] %*% v[[t]] + error[[t]][i]"
"0","#    }"
"0","#  }"
"0","  "
"0","  return(resid)"
"0","}"
"0","#for (i in 1:20){ "
"0","#Xs<- t(as.matrix(Beta[i,,]))*v  "
"0","#Y<- resid[i,]  "
"0","#df<- data.frame(Y,Xs)"
"0","#  fit<- lm(Y~Xs,df)    "
"0","#summary(fit)$r.squared  "
"0","#  }"
"0","#This generates the final return series, given the residuals (to be generated using above function)"
"0","  #########################"
"0","# Axt <- gen_xt(A1)"
"0","  #########################"
"0","#########################"
"0","# Generate a single X series for now"
"0","#########################"
"0","x<- matrix(0,(Time+1),1)"
"0","ers<- rnorm((Time+1),0,1)*(1-.95^2)"
"0","x[1,1]<-ers[1]"
"0","for (t in 2:(Time+1))"
"0","{"
"0","  "
"0","x[t,]<- .95 *x[t-1,]+ers[t]  "
"0","  "
"0","  "
"0","}"
"0","res<- gen_rt_resid(omega, gamma, w, v_sd)"
"0","Reg_fun<-g1(C,x,theta)"
"0","rt<- Reg_fun+res"
