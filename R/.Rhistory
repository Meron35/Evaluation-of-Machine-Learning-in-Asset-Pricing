v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
return = rep(0, N*Time),
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
return = rep(0, Time+1),
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$return[t] <- resid[[t]][i] + g[[t]][i]
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
}
#Cbind returns, id, time and predictors
panel <- cbind(rt_cross_tune_df$return, rt_cross_tune_df$resid, rt_cross_tune_df$g, c(1:(Time+1)), c(rep(i, (Time+1))))
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel
}
#Sort by time
rt_cross_tune_panel <- rt_cross_tune_panel %>%
arrange(time)
#Remove 1st row because returns data only starts from t = 2
rt_cross_tune_panel <- rt_cross_tune_panel %>%
filter(time != 1) %>%
select(-time)
#Individual return R squared
rt_id_tune_df <- data.frame(
stock = c(1:N),
rsquare = c(1:N)
)
for (i in 1:N) {
rt_id_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
SSR <- t(rt_id_tune_panel$return - rt_cross_tune_panel$g) %*% (rt_id_tune_panel$return - rt_cross_tune_panel$g)
SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))
#SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)
rt_id_tune_df$rsquare[i] <- 1 - SSR/SST
}
#Return mean of each individual rsquared
mean(rt_id_tune_df$rsquare)
#Calculate Annualized Volatility
#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year
vol_tune_df <- data.frame(
stock = c(1:N),
annual_vol = c(1:N)
)
for (i in 1:N) {
vol_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)
}
#Return the mean annualized volatility
#Want this aorund 30%
mean(vol_tune_df$annual_vol)
#Cross sectional r squared
SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)
SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))
#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)
1 - SSR/SST
#This is quite off from Gu et al's specification and results. NOT GOOD
View(rt_id_tune_panel)
(rt_id_tune_panel$return - rt_cross_tune_panel$g)^2
rt_id_tune_panel$return - rt_cross_tune_panel$g
(rt_id_tune_panel$return - rt_cross_tune_panel$g) == rt_cross_tune_panel$resid
#Tuning Cross Sectional R Squared SKELETON CODE
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
#Tune v_sd for inidividual r square first
#Gu et al had 0.05 for their v sd
v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
return = rep(0, N*Time),
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
return = rep(0, Time+1),
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1),
stock = rep(i, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$return[t] <- resid[[t]][i] + g[[t]][i]
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
rt_cross_tune_df$time <- t
}
#Cbind returns, id, time and predictors
panel <- cbind(rt_cross_tune_df$return, rt_cross_tune_df$resid, rt_cross_tune_df$g, rt_cross_tune_df$time, rt_cross_tune_df$stock)
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel
}
#Sort by time
rt_cross_tune_panel <- rt_cross_tune_panel %>%
arrange(time)
#Remove 1st row because returns data only starts from t = 2
rt_cross_tune_panel <- rt_cross_tune_panel %>%
filter(time != 1) %>%
select(-time)
#Individual return R squared
rt_id_tune_df <- data.frame(
stock = c(1:N),
rsquare = c(1:N)
)
for (i in 1:N) {
rt_id_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
SSR <- t(rt_id_tune_panel$return - rt_cross_tune_panel$g) %*% (rt_id_tune_panel$return - rt_cross_tune_panel$g)
SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))
#SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)
rt_id_tune_df$rsquare[i] <- 1 - SSR/SST
}
#Return mean of each individual rsquared
mean(rt_id_tune_df$rsquare)
#Calculate Annualized Volatility
#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year
vol_tune_df <- data.frame(
stock = c(1:N),
annual_vol = c(1:N)
)
for (i in 1:N) {
vol_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)
}
#Return the mean annualized volatility
#Want this aorund 30%
mean(vol_tune_df$annual_vol)
#Cross sectional r squared
SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)
SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))
#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)
1 - SSR/SST
#This is quite off from Gu et al's specification and results. NOT GOOD
(rt_id_tune_panel$return - rt_cross_tune_panel$g) == rt_cross_tune_panel$resid
#Tuning Cross Sectional R Squared SKELETON CODE
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
#Tune v_sd for inidividual r square first
#Gu et al had 0.05 for their v sd
v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
return = rep(0, N*Time),
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1),
stock = rep(i, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
rt_cross_tune_df$time <- t
}
#Cbind returns, id, time and predictors
panel <- cbind(rt_cross_tune_df$resid, rt_cross_tune_df$g, rt_cross_tune_df$time, rt_cross_tune_df$stock)
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel
}
#Tuning Cross Sectional R Squared SKELETON CODE
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
#Tune v_sd for inidividual r square first
#Gu et al had 0.05 for their v sd
v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1),
stock = rep(i, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
rt_cross_tune_df$time <- t
}
#Cbind returns, id, time and predictors
panel <- cbind(rt_cross_tune_df$resid, rt_cross_tune_df$g, rt_cross_tune_df$time, rt_cross_tune_df$stock)
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel
}
#Sort by time
rt_cross_tune_panel <- rt_cross_tune_panel %>%
arrange(time)
#Remove 1st row because returns data only starts from t = 2
rt_cross_tune_panel <- rt_cross_tune_panel %>%
filter(time != 1) %>%
select(-time) %>%
mutate(return = resid + g)
#Individual return R squared
rt_id_tune_df <- data.frame(
stock = c(1:N),
rsquare = c(1:N)
)
for (i in 1:N) {
rt_id_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
SSR <- t(rt_id_tune_panel$return - rt_cross_tune_panel$g) %*% (rt_id_tune_panel$return - rt_cross_tune_panel$g)
SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))
#SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)
rt_id_tune_df$rsquare[i] <- 1 - SSR/SST
}
#Return mean of each individual rsquared
mean(rt_id_tune_df$rsquare)
#Calculate Annualized Volatility
#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year
vol_tune_df <- data.frame(
stock = c(1:N),
annual_vol = c(1:N)
)
for (i in 1:N) {
vol_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)
}
#Return the mean annualized volatility
#Want this aorund 30%
mean(vol_tune_df$annual_vol)
#Cross sectional r squared
SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)
SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))
#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)
1 - SSR/SST
#This is quite off from Gu et al's specification and results. NOT GOOD
#Tuning Cross Sectional R Squared SKELETON CODE
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
#Tune v_sd for inidividual r square first
#Gu et al had 0.05 for their v sd
v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1),
stock = rep(i, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
rt_cross_tune_df$time <- t
}
#Cbind returns, id, time and predictors
panel <- cbind(rt_cross_tune_df$resid, rt_cross_tune_df$g, rt_cross_tune_df$time, rt_cross_tune_df$stock)
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel
}
#Sort by time
rt_cross_tune_panel <- rt_cross_tune_panel %>%
arrange(time)
#Remove 1st row because returns data only starts from t = 2
rt_cross_tune_panel <- rt_cross_tune_panel %>%
filter(time != 1) %>%
select(-time) %>%
mutate(return = resid + g)
#Individual return R squared
rt_id_tune_df <- data.frame(
stock = c(1:N),
rsquare = c(1:N)
)
for (i in 1:N) {
rt_id_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
SSR <- t(rt_id_tune_panel$return - rt_id_tune_panel$g) %*% (rt_id_tune_panel$return - rt_id_tune_panel$g)
SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))
#SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)
rt_id_tune_df$rsquare[i] <- 1 - SSR/SST
}
#Return mean of each individual rsquared
mean(rt_id_tune_df$rsquare)
#Calculate Annualized Volatility
#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year
vol_tune_df <- data.frame(
stock = c(1:N),
annual_vol = c(1:N)
)
for (i in 1:N) {
vol_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)
}
#Return the mean annualized volatility
#Want this aorund 30%
mean(vol_tune_df$annual_vol)
#Cross sectional r squared
SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)
SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))
#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)
1 - SSR/SST
#This is quite off from Gu et al's specification and results. NOT GOOD
(rt_id_tune_panel$return - rt_id_tune_panel$g) == rt_id_tune_panel$resid
#Tuning Cross Sectional R Squared SKELETON CODE
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
#Tune v_sd for inidividual r square first
#Gu et al had 0.05 for their v sd
v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1),
stock = rep(i, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
rt_cross_tune_df$time <- t
}
#Cbind returns, id, time and predictors
panel <- cbind(rt_cross_tune_df$resid, rt_cross_tune_df$g, rt_cross_tune_df$time, rt_cross_tune_df$stock)
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- panel
}
#Remove 1st row because returns data only starts from t = 2
rt_cross_tune_panel <- rt_cross_tune_panel %>%
filter(time != 1) %>%
select(-time) %>%
mutate(return = resid + g)
#Individual return R squared
rt_id_tune_df <- data.frame(
stock = c(1:N),
rsquare = c(1:N)
)
for (i in 1:N) {
rt_id_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
SSR <- t(rt_id_tune_panel$return - rt_id_tune_panel$g) %*% (rt_id_tune_panel$return - rt_id_tune_panel$g)
SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))
#SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)
rt_id_tune_df$rsquare[i] <- 1 - SSR/SST
}
#Return mean of each individual rsquared
mean(rt_id_tune_df$rsquare)
#Calculate Annualized Volatility
#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year
vol_tune_df <- data.frame(
stock = c(1:N),
annual_vol = c(1:N)
)
for (i in 1:N) {
vol_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)
}
#Return the mean annualized volatility
#Want this aorund 30%
mean(vol_tune_df$annual_vol)
#Cross sectional r squared
SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)
SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))
#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)
1 - SSR/SST
#This is quite off from Gu et al's specification and results. NOT GOOD
(rt_id_tune_panel$return - rt_id_tune_panel$g) == rt_id_tune_panel$resid
#Tuning Cross Sectional R Squared SKELETON CODE
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
#Tune v_sd for inidividual r square first
#Gu et al had 0.05 for their v sd
v_sd <- 0.05
ep_sd <- 0.05
#Tune theta for cross sectional r square
#theta
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
resid <- gu_gen_rt_resid(v_sd, ep_sd)
g <- gu_gen_g(gu_g1)
rt_cross_tune_panel <- data.frame(
g = rep(0, N*Time),
resid = rep(0, N*Time),
time = rep(0, N*Time),
stock = rep(0, N*Time)
)
for (i in 1:N){
rt_cross_tune_df <- data.frame(
resid = rep(0, Time+1),
g = rep(0, Time+1),
time = rep(0, Time+1),
stock = rep(i, Time+1)
)
for (t in 1:(Time+1)){
rt_cross_tune_df$resid[t] <- resid[[t]][i]
rt_cross_tune_df$g[t] <- g[[t]][i]
rt_cross_tune_df$time <- t
}
#Cbind returns, id, time and predictors
rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- rt_cross_tune_df
}
#Remove 1st row because returns data only starts from t = 2
rt_cross_tune_panel <- rt_cross_tune_panel %>%
filter(time != 1) %>%
select(-time) %>%
mutate(return = resid + g)
#Individual return R squared
rt_id_tune_df <- data.frame(
stock = c(1:N),
rsquare = c(1:N)
)
for (i in 1:N) {
rt_id_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
SSR <- t(rt_id_tune_panel$return - rt_id_tune_panel$g) %*% (rt_id_tune_panel$return - rt_id_tune_panel$g)
SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))
#SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)
rt_id_tune_df$rsquare[i] <- 1 - SSR/SST
}
#Return mean of each individual rsquared
mean(rt_id_tune_df$rsquare)
#Calculate Annualized Volatility
#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year
vol_tune_df <- data.frame(
stock = c(1:N),
annual_vol = c(1:N)
)
for (i in 1:N) {
vol_tune_panel <- rt_cross_tune_panel %>%
filter(stock == i)
vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)
}
#Return the mean annualized volatility
#Want this aorund 30%
mean(vol_tune_df$annual_vol)
#Cross sectional r squared
SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)
SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))
#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)
1 - SSR/SST
#This is quite off from Gu et al's specification and results. NOT GOOD
