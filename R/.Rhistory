scale_x_discrete(label = labels, breaks = breaks) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
ggsave("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/simulation_ave_vi_plot.pdf",
width = 20 * a4_aspect_ratio, height = 20, units = "cm")
all_vi_df_averaged %>%
filter(variable %in% top_variables) %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
all_vi_df_averaged %>%
filter(variable %in% top_variables) %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
ggsave("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/simulation_ave_vi_plot.pdf",
width = 20 * a4_aspect_ratio, height = 20, units = "cm")
top_variables <- all_vi_df_averaged %>%
group_by(variable) %>%
summarise(importance = mean(importance)) %>%
arrange(desc(importance)) %>%
top_n(30, importance)
all_vi_df_averaged %>%
filter(variable %in% top_variables) %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
top_variables <- as.character(top_variables$variable)
all_vi_df_averaged %>%
filter(variable %in% top_variables) %>%
group_by(dgp_spec, model, cross_corr, variable, SV) %>%
summarise(importance = mean(importance)) %>%
ungroup() %>%
mutate(variable = fct_reorder(variable, importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral") +
# Facet
facet_grid(rows = vars(cross_corr), cols = vars(dgp_spec))
ggsave("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/simulation_ave_vi_plot.pdf",
width = 20 * a4_aspect_ratio, height = 20, units = "cm")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(readr)
library(zoo)
library(readxl)
library(Matrix)
library(speedglm)
library(tidyimpute)
library(tidyverse)
library(hqreg)
library(xtable)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
empirical_tidy_vi_ind %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
facet_grid(rows = vars(sample)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right")
## Load in results
LM_stats_mse <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/LM_stats_mse.rds")
LM_stats_mae <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/LM_stats_mae.rds")
ELN_stats_mse <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/ELN_stats_mse.rds")
ELN_stats_mae <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/ELN_stats_mae.rds")
RF_mse_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/RF_mse_stats_1.5_train_valid.rds")
RF_mae_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/RF_mae_stats_1.5_train_valid.rds")
################################################################
NNet_1_mse_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_1_mse_stats_1.5.rds")
NNet_1_mae_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_1_mae_stats_1.5.rds")
NNet_2_mse_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_2_mse_stats_1.5.rds")
NNet_2_mae_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_2_mae_stats_1.5.rds")
NNet_3_mse_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_3_mse_stats_1.5.rds")
NNet_3_mae_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_3_mae_stats_1.5.rds")
NNet_4_mse_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_4_mse_stats_1.5.rds")
NNet_4_mae_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_4_mae_stats_1.5.rds")
NNet_5_mse_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_5_mse_stats_1.5.rds")
NNet_5_mae_stats <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/NNet_5_mae_stats_1.5.rds")
## Rbinding Loss Stats
empirical_results_df <- foreach(sample = (1:3), .combine = "rbind") %do% {
cbind(Sample = sample,
rbind(
cbind(model = "LM_MSE", LM_stats_mse[[sample]]$loss_stats),
cbind(model = "LM_MAE", LM_stats_mae[[sample]]$loss_stats),
cbind(model = "ELN_MSE", ELN_stats_mse[[sample]]$loss_stats),
cbind(model = "ELN_MAE", ELN_stats_mae[[sample]]$loss_stats),
cbind(model = "RF_MSE", RF_mse_stats[[sample]]$loss_stats),
cbind(model = "RF_MAE", RF_mae_stats[[sample]]$loss_stats),
cbind(model = "NN1_MSE", NNet_1_mse_stats[[sample]]$loss_stats),
cbind(model = "NN1_MAE", NNet_1_mae_stats[[sample]]$loss_stats),
cbind(model = "NN2_MSE", NNet_2_mse_stats[[sample]]$loss_stats),
cbind(model = "NN2_MAE", NNet_2_mae_stats[[sample]]$loss_stats),
cbind(model = "NN3_MSE", NNet_3_mse_stats[[sample]]$loss_stats),
cbind(model = "NN3_MAE", NNet_3_mae_stats[[sample]]$loss_stats),
cbind(model = "NN4_MSE", NNet_4_mse_stats[[sample]]$loss_stats),
cbind(model = "NN4_MAE", NNet_4_mae_stats[[sample]]$loss_stats),
cbind(model = "NN5_MSE", NNet_5_mse_stats[[sample]]$loss_stats),
cbind(model = "NN5_MAE", NNet_5_mae_stats[[sample]]$loss_stats)
)
)
}
write.csv(empirical_results_df, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_results.csv")
print(xtable(empirical_results_df, caption = "Empirical Data Results"),
file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_results.tex",
tabular.environment = "longtable")
empirical_tidy_vi_ind %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
facet_grid(rows = vars(sample)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right")
## Function to filter out ind and macro dfs
filter_vi_df <- function(variable_importance_df, type ){
if(type == "ind") {
variable_importance_df %>%
filter(str_detect(variable, "ind_"))
} else {
variable_importance_df %>%
filter(str_detect(variable, "macro_"))
}
}
normalize_variable_importance <- function(variable_importance_df) {
variable_importance_df %>%
# Add a very very tiny value so that division by zero does not occur
mutate(importance = importance + 1e-100) %>%
mutate(importance = importance + abs(min(importance))) %>%
mutate(importance = importance/sum(importance))
}
empirical_tidy_vi_all <- foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(model = "LM_MSE", sample = sample, normalize_variable_importance(LM_stats_mse[[sample]]$variable_importance)),
cbind(model = "LM_MAE", sample = sample, normalize_variable_importance(LM_stats_mae[[sample]]$variable_importance)),
cbind(model = "ELN_MSE", sample = sample, normalize_variable_importance(ELN_stats_mse[[sample]]$variable_importance)),
cbind(model = "ELN_MAE", sample = sample, normalize_variable_importance(ELN_stats_mae[[sample]]$variable_importance)),
cbind(model = "RF_MSE", sample = sample, normalize_variable_importance(RF_mse_stats[[sample]]$variable_importance)),
cbind(model = "RF_MAE", sample = sample, normalize_variable_importance(RF_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN1_MSE", sample = sample, normalize_variable_importance(NNet_1_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN1_MAE", sample = sample, normalize_variable_importance(NNet_1_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN2_MSE", sample = sample, normalize_variable_importance(NNet_2_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN2_MAE", sample = sample, normalize_variable_importance(NNet_2_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN3_MSE", sample = sample, normalize_variable_importance(NNet_3_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN3_MAE", sample = sample, normalize_variable_importance(NNet_3_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN4_MSE", sample = sample, normalize_variable_importance(NNet_4_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN4_MAE", sample = sample, normalize_variable_importance(NNet_4_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN5_MSE", sample = sample, normalize_variable_importance(NNet_5_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN5_MAE", sample = sample, normalize_variable_importance(NNet_5_mae_stats[[sample]]$variable_importance))
)
}
empirical_tidy_vi_all <- empirical_tidy_vi_all %>%
arrange(as.character((variable))) %>%
mutate(variable = factor(as.character(variable), levels= unique(sort(as.character(variable)))))
write.csv(empirical_tidy_vi_all, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_tidy_vi.csv")
## By factor type
empirical_tidy_vi_ind <- foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(model = "LM_MSE", sample = sample,
LM_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "LM_MAE", sample = sample,
LM_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "ELN_MSE", sample = sample,
ELN_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "ELN_MAE", sample = sample,
ELN_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "RF_MSE", sample = sample,
RF_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "RF_MAE", sample = sample,
RF_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN1_MSE", sample = sample,
NNet_1_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN1_MAE", sample = sample,
NNet_1_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN2_MSE", sample = sample,
NNet_2_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN2_MAE", sample = sample,
NNet_2_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN3_MSE", sample = sample,
NNet_3_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN3_MAE", sample = sample,
NNet_3_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN4_MSE", sample = sample,
NNet_4_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN4_MAE", sample = sample,
NNet_4_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN5_MSE", sample = sample,
NNet_5_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN5_MAE", sample = sample,
NNet_5_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance())
)
}
empirical_tidy_vi_ind <- empirical_tidy_vi_ind %>%
arrange(as.character(variable)) %>%
mutate(variable = factor(as.character(variable), levels= unique(sort(as.character(variable)))))
write.csv(empirical_tidy_vi_ind, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_tidy_vi_ind.csv")
empirical_tidy_vi_macro <- foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(model = "LM_MSE", sample = sample,
LM_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "LM_MAE", sample = sample,
LM_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "ELN_MSE", sample = sample,
ELN_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "ELN_MAE", sample = sample,
ELN_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "RF_MSE", sample = sample,
RF_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "RF_MAE", sample = sample,
RF_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN1_MSE", sample = sample,
NNet_1_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN1_MAE", sample = sample,
NNet_1_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN2_MSE", sample = sample,
NNet_2_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN2_MAE", sample = sample,
NNet_2_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN3_MSE", sample = sample,
NNet_3_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN3_MAE", sample = sample,
NNet_3_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN4_MSE", sample = sample,
NNet_4_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN4_MAE", sample = sample,
NNet_4_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN5_MSE", sample = sample,
NNet_5_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN5_MAE", sample = sample,
NNet_5_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance())
)
}
empirical_tidy_vi_macro <- empirical_tidy_vi_macro %>%
arrange(as.character(variable)) %>%
mutate(variable = factor(as.character(variable), levels= unique(sort(as.character(variable)))))
write.csv(empirical_tidy_vi_macro, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_tidy_vi_macro.csv")
empirical_tidy_vi_ind %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
facet_grid(rows = vars(sample)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right")
## All sample variable importance
empirical_tidy_vi_ind %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill= importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right")
breaks <- levels(empirical_tidy_vi_ind$variable)
labels <- as.expression(breaks)
mom1m <- which(breaks == "ind_mom1m")
mom6m <- which(breaks == "ind_mom6m")
mvel1 <- which(breaks == "ind_mvel1")
labels[[mom1m]] <- bquote(bold(.(labels[[mom1m]])))
labels[[mom6m]] <- bquote(bold(.(labels[[mom6m]])))
labels[[mvel1]] <- bquote(bold(.(labels[[mvel1]])))
empirical_tidy_vi_ind %>%
filter(sample == 1) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, alpha = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
empirical_tidy_vi_ind %>%
filter(sample == 1) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
empirical_tidy_vi_ind %>%
filter(sample == 1) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
breaks <- levels(empirical_tidy_vi_ind$variable)
labels <- as.expression(breaks)
mom1m <- which(breaks == "ind_mom1m")
mom6m <- which(breaks == "ind_mom6m")
mvel1 <- which(breaks == "ind_mvel1")
labels[[mom1m]] <- bquote(bold(.(labels[[mom1m]])))
labels[[mom6m]] <- bquote(bold(.(labels[[mom6m]])))
labels[[mvel1]] <- bquote(bold(.(labels[[mvel1]])))
empirical_tidy_vi_ind %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
facet_grid(rows = vars(sample)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right")
empirical_tidy_vi_ind %>%
filter(sample == 1) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = model, y = variable, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
empirical_tidy_vi_ind %>%
filter(sample == 1) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_sample_1_vi_ind.pdf",
width = 15, height = 15 * a4_aspect_ratio, units = "cm")
empirical_tidy_vi_ind %>%
filter(sample == 2) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_sample_2_vi_ind.pdf",
width = 15, height = 15 * a4_aspect_ratio, units = "cm")
empirical_tidy_vi_ind %>%
filter(sample == 3) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_sample_3_vi_ind.pdf",
width = 15, height = 15 * a4_aspect_ratio, units = "cm")
empirical_tidy_vi_ind %>%
filter(sample == 1) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_sample_1_vi_ind.pdf",
width = 15 * a4_aspect_ratio, height = 15, units = "cm")
empirical_tidy_vi_ind %>%
filter(sample == 2) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_sample_2_vi_ind.pdf",
width = 15 * a4_aspect_ratio, height = 15, units = "cm")
empirical_tidy_vi_ind %>%
filter(sample == 3) %>%
group_by(sample, model) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
scale_x_discrete(label = labels, breaks = breaks) +
scale_fill_distiller(palette = "Spectral") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical_sample_3_vi_ind.pdf",
width = 15 * a4_aspect_ratio, height = 15, units = "cm")
