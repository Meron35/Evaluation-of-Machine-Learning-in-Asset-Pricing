g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
#This is just code to generate the different specifications of the dataset
#Gu et al were really extra and ran something like 100 different simulation for their specification
#Currently a bit of a playground
##Just a recap chunk of everything that needs to be run to generate everything thus far before we move on to tuning R squared
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
##########################################
## OBSERVATIONS
##########################################
#########
# G1 CASE
# Turning on cross sectional correlation somehow makes the time series and cross sectional r squared values really high. Time series r squared seems to hover around 30-50% ish, and cross sectional rsquared hovers anywhere from 1% to 30%. r squared values vary a lot between simulations
#
sim_tune_stats <- data.frame(time_series_rsquare = rep(0, 100), annual_vol = rep(0, 100), cross_section_rsquare = rep(0, 100))
for (s in 1:100) {
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
sim_tune_stats[i] <- panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
}
for (s in 1:100) {
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
sim_tune_stats[s] <- panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
}
sim_tune_stats <- data.frame(time_series_rsquare = rep(0, 100), annual_vol = rep(0, 100), cross_section_rsquare = rep(0, 100))
{
for (s in 1:100) {
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
#Change this to C_hat if you want to build in cross sectional correlation
C <- gen_C(C_bar)
##########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
##########################
xt <- gen_xt(A1)
xt_univariate <- gen_xt_univariate()
#Generate the true underlying factors first
g1_factor_panel <- gen_g_factor_panel(g1, C, xt)
#Then pass them through to multiply them by theta to get g()
g1_panel <- gen_g_panel(g1_factor_panel, theta = matrix(c(0.04, 0.035, 0.01), nrow = 1))
#Generate the errors
#SV version
error_sv <- gen_error(sv = 1, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
error_nosv <- gen_error(sv = 0, 0.05, omega = -0.736, gamma = 0.90, w = sqrt(0.363), C, v_sd = 0.05)
rt_panel_g1_A1 <- g1_panel + error_sv
sim_tune_stats[s,] <- panel_tune_stats(rt_panel_g1_A1, g1_factor_panel)
}
View(sim_tune_stats)
View(sim_tune_stats)
sim_tune_stats
asd
we
