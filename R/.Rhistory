return(ELN_stats)
}
################################################################################################################################
RF_fit_model_grid <- function(f, train, validation, RF_grid, loss_function) {
#Initialize List
RF_model_grid <- rep(list(0), nrow(RF_grid))
for (i in 1:nrow(RF_grid)) {
RF_model_grid[[i]] <- list(RF_grid = 0, model = 0)
#MSE Case
if (loss_function == "mse") {
RF <- rfsrc(f, train,
#Hyperparameters
ntree = RF_grid$ntree[i],
mtry = RF_grid$mtry[i],
nodesize = RF_grid$nodesize[i],
splitrule = "mse"
)
#RF_model_grid[[i]]$model <- RF
RF_model_grid[[i]]$RF_grid <- cbind(RF_grid[i, ],
#Train Loss
train_loss = mse(train$rt, predict(RF)$predicted),
#Validation Loss
validation_loss = mse(validation$rt, predict(RF, newdata = validation)$predicted)
)
} else {
#MAE Case
RF <- rfsrc(f, train,
#Hyperparameters
ntree = RF_grid$ntree[i],
mtry = RF_grid$mtry[i],
nodesize = RF_grid$nodesize[i],
splitrule = "quantile.regr",
prob = 0.5
)
#RF_model_grid[[i]]$model <- RF
RF_model_grid[[i]]$RF_grid <- cbind(RF_grid[i, ],
#Train Loss
train_loss = mae(train$rt, predict(RF)$predicted),
#Validation Loss
validation_loss = mae(validation$rt, predict(RF, newdata = validation)$predicted)
)
}
}
return(RF_model_grid)
}
#Returns the dataframe row containing the "best" hyperparameters
get_RF_best_tune <- function(RF_model_grid) {
RF_tune_grid <- RF_model_grid[[1]]$RF_grid
for (i in 2:length(RF_model_grid)) {
RF_tune_grid <- rbind(RF_tune_grid, RF_model_grid[[i]]$RF_grid)
}
return(RF_tune_grid[which.min(RF_tune_grid$validation_loss), ])
}
RF_fit_stats <- function(pooled_panel, RF_grid, timeSlices, loss_function,
macro_factor_names, individual_factor_names) {
#Initialize
RF_stats <- rep(list(0), 3)
f <- panel_formula(pooled_panel)
#Load training, validation and test sets
for (set in 1:3) {
RF_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
forecast_resids = 0,
model = 0,
hyperparameters = 0,
variable_importance = 0)
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
#Fit on training Set over grid of hyperparameters
model_grid <- RF_fit_model_grid(f, train, validation, RF_grid, loss_function)
#Get the best hyperparameters
best_model_params <- get_RF_best_tune(model_grid)
RF_stats[[set]]$hyperparameters <- best_model_params
#Compute the optimal model
if (loss_function == "mse") {
model <- rfsrc(f, train,
#Hyperparameters
ntree = best_model_params$ntree,
mtry = best_model_params$mtry,
nodesize = best_model_params$nodesize,
splitrule = "mse",
bootstrap = "by.root", samptype = "swr"
)
} else {
model <- rfsrc(f, train,
#Hyperparameters
ntree = best_model_params$ntree,
mtry = best_model_params$mtry,
nodesize = best_model_params$nodesize,
splitrule = "quantile.regr",
prob = 0.5,
bootstrap = "by.root", samptype = "swr"
)
}
RF_stats[[set]]$model <- model
#Train
train_predict <- predict(model, train)$predicted
RF_stats[[set]]$loss_stats$train_MAE <- mae(train$rt, train_predict)
RF_stats[[set]]$loss_stats$train_MSE <- mse(train$rt, train_predict)
RF_stats[[set]]$loss_stats$train_RMSE <- rmse(train$rt, train_predict)
RF_stats[[set]]$loss_stats$train_RSquare <- (1 - sse(train$rt, train_predict) / sum((train$rt - mean(train$rt))^2))
#Validation
valid_predict <- predict(model, newdata = validation)$predicted
RF_stats[[set]]$loss_stats$validation_MAE <- mae(validation$rt, valid_predict)
RF_stats[[set]]$loss_stats$validation_MSE <- mse(validation$rt, valid_predict)
RF_stats[[set]]$loss_stats$validation_RMSE <- rmse(validation$rt, valid_predict)
RF_stats[[set]]$loss_stats$validation_RSquare <- (1 - sse(validation$rt, valid_predict) / sum((validation$rt - mean(validation$rt))^2))
#Test
test_predict <- predict(model, newdata = test)$predicted
RF_stats[[set]]$loss_stats$test_MAE <- mae(test$rt, test_predict)
RF_stats[[set]]$loss_stats$test_MSE <- mse(test$rt, test_predict)
RF_stats[[set]]$loss_stats$test_RMSE <- rmse(test$rt, test_predict)
RF_stats[[set]]$loss_stats$test_RSquare <- (1 - sse(test$rt, test_predict) / sum((test$rt - mean(test$rt))^2))
#Forecast residuals
RF_stats[[set]]$forecast_resids <- rf_ave_forecast_resids(rf_model = model, test = test)
#Variable Importance
RF_stats[[set]]$variable_importance <- RF_variable_importance(test, model,
macro_factor_names, individual_factor_names)
}
return(RF_stats)
}
#########################################################################################################################
NNet_fit_stats <- function(pooled_panel, timeSlices, hidden_layers, loss_function, batch_size, patience,
macro_factor_names, individual_factor_names) {
#Initialize
NNet_stats <- rep(list(0), 3)
for (set in 1:3) {
NNet_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
# Keep forecasts here in for nnet objects to make sure they aren't doing something stupid
forecasts = 0,
forecast_resids = 0,
model = 0,
variable_importance = 0)
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test<- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
train_x <- train[4:ncol(train)]
train_x <- scale(train_x)
col_means_train <- attr(train_x, "scaled:center")
col_stddevs_train <- attr(train_x, "scaled:scale")
train_y <- train$rt
validation_x <- validation[4:ncol(validation)]
validation_x <- scale(validation_x, center = col_means_train, scale = col_stddevs_train)
validation_y <- validation$rt
test_x <- test[4:ncol(test)]
test_x <- scale(test_x, center = col_means_train, scale = col_stddevs_train)
test_y <- test$rt
# Fit the model
# The patience parameter is the amount of epochs to check for improvement.
# Gu et al don't say what their early stopping parameter p is
early_stop <- callback_early_stopping(monitor = "val_loss", patience = patience, restore_best_weights = FALSE)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 50 == 0) cat("\n")
cat(".")
}
)
l1_penalty <- 0.01
build_NN <- function(hidden_layers, loss_function) {
if (hidden_layers == 1) {
model <- keras_model_sequential() %>%
# Layer 1
layer_dense(units = 32, input_shape = ncol(train_x),
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
# Output Layer
layer_dense(units = 1, activation = "linear")
} else if (hidden_layers == 2) {
model <- keras_model_sequential() %>%
# Layer 1
layer_dense(units = 32, input_shape = ncol(train_x),
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
# Layer 2
layer_dense(units = 16,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
# Output Layer
layer_dense(units = 1, activation = "linear")
} else if (hidden_layers == 3) {
model <- keras_model_sequential() %>%
# Layer 1
layer_dense(units = 32, input_shape = ncol(train_x),
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
# Layer 2
layer_dense(units = 16,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
#Layer 3
layer_dense(units = 8,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
# Output Layer
layer_dense(units = 1, activation = "linear")
} else if (hidden_layers == 4) {
model <- keras_model_sequential() %>%
# Layer 1
layer_dense(units = 32, input_shape = ncol(train_x),
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
# Layer 2
layer_dense(units = 16,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
#Layer 3
layer_dense(units = 8,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
#Layer 4
layer_dense(units = 4,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
# Output Layer
layer_dense(units = 1, activation = "linear")
} else {
model <- keras_model_sequential() %>%
# Layer 1
layer_dense(units = 32, input_shape = ncol(train_x),
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
# Layer 2
layer_dense(units = 16,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
#Layer 3
layer_dense(units = 8,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
#Layer 4
layer_dense(units = 4,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
#Layer 5
layer_dense(units = 2,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("relu") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dropout(rate = 0.5) %>%
# Output Layer
layer_dense(units = 1, activation = "linear")
}
model %>% compile(
loss = loss_function,
optimizer = optimizer_nadam(lr = 0.002, beta_1 = 0.9, beta_2 = 0.999,
epsilon = NULL, clipnorm = NULL,
clipvalue = NULL),
metrics = list("mae", "mse")
)
model
}
neural_network <- build_NN(hidden_layers, loss_function)
# Other options used throughout the neural network fitting process are specified here
# Namely, batch size
# In general, larger batch sizes result in faster progress in training, but don't always converge as fast. Smaller batch sizes train slower, but can converge faster.
# Default batch size is 32
neural_network %>% fit(as.matrix(train_x), as.matrix(train_y),
batch_size = batch_size, epochs = 500, verbose = 1,
validation_data = list(as.matrix(validation_x), as.matrix(validation_y)),
callbacks = list(early_stop, print_dot_callback))
#Model
NNet_stats[[set]]$model <- neural_network
#Train
train_predict <- neural_network %>% predict(as.matrix(train_x))
NNet_stats[[set]]$loss_stats$train_MAE <- mae(train$rt, train_predict)
NNet_stats[[set]]$loss_stats$train_MSE <- mse(train$rt, train_predict)
NNet_stats[[set]]$loss_stats$train_RMSE <- rmse(train$rt, train_predict)
NNet_stats[[set]]$loss_stats$train_RSquare <- R2(train_predict, train$rt, form = "traditional")
#Validation
validation_predict <- neural_network %>% predict(as.matrix(validation_x))
NNet_stats[[set]]$loss_stats$validation_MAE <- mae(validation$rt, validation_predict)
NNet_stats[[set]]$loss_stats$validation_MSE <- mse(validation$rt, validation_predict)
NNet_stats[[set]]$loss_stats$validation_RMSE <- rmse(validation$rt, validation_predict)
NNet_stats[[set]]$loss_stats$validation_RSquare <- R2(validation_predict, validation$rt, form = "traditional")
#Test
test_predict <- neural_network %>% predict(as.matrix(test_x))
NNet_stats[[set]]$loss_stats$test_MAE <- mae(test$rt, test_predict)
NNet_stats[[set]]$loss_stats$test_MSE <- mse(test$rt, test_predict)
NNet_stats[[set]]$loss_stats$test_RMSE <- rmse(test$rt, test_predict)
NNet_stats[[set]]$loss_stats$test_RSquare <- R2(test_predict, test$rt, form = "traditional")
#Forecasts
NNet_stats[[set]]$forecasts <- test_predict
#Forecast residuals
NNet_stats[[set]]$forecast_resids <- nnet_ave_forecast_resids(nnet_model = neural_network, test = test)
#Variable Importance
NNet_stats[[set]]$variable_importance <- NNet_variable_importance(test, neural_network,
macro_factor_names, individual_factor_names)
}
NNet_stats
}
###################################################################################################################
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse", f,
macro_factor_names, individual_factor_names)
## Setting up time slices, formulas, etc
## time slices function
## Different function needed due to different time format (inclusion of quarters)
## Makes it so that it works with all of our model fitting function from earlier
realdata_custom_timeslices <- function(start, initialWindow, horizon, validation_size, test_size, set_no) {
time_slice <- list(train = 0, validation = 0, test = 0)
time_slices <- rep(list(time_slice), set_no)
for (t in 1:set_no) {
time_slice$train <- seq(start,
(start + initialWindow + (t-1) * horizon + 3/4),
0.25)
time_slice$validation <- seq(
(start + initialWindow + (t-1) * horizon + 1),
(start + initialWindow + (t-1) * horizon + validation_size + 3/4),
0.25
)
time_slice$test <- seq(
(start + initialWindow + (t-1) * horizon + validation_size + 1),
(start + (initialWindow + (t-1) * horizon) + validation_size + test_size + 3/4),
0.25
)
time_slices[[t]] <- time_slice
}
time_slices
}
# These are the settings working with a dataset going from 1993 - 2016
realdata_timeSlices <- realdata_custom_timeslices(start = 1993, initialWindow = 15, horizon = 1, validation_size = 3, test_size = 3, set_no = 3)
# Formula
real_panel_formula <- function(panel){
#Remove the first 3 colNames, as these correspond to the return, time and stock id
panel_colnames <- colnames(panel)[-c(1:3)]
f <- as.formula(c("rt ~", paste(panel_colnames, collapse = "+")))
return(f)
}
##################################################################
## Function to conduct variable importance for real data
# This is slightly different from the functions used in the simulated context, as we do not care about the importance of ALL interaction terms
# Use the same function names as the simulated ones for simplicity, MAKE SURE YOU RUN THIS BEFORE FITTING EMPIRICAL DATA
# General plan:
# Use grepl & partial matching to match which columns contain which factor columns contain which factor
# Much more straightforward than generating a new panel containing a new set of interaction terms
# Slight problem, some of the column names can "overlap" E.g. bm and bm_ia
################################################
# Linear Model
LM_variable_importance <- function(test, lm_model,
macro_factor_names, individual_factor_names) {
# -1 to get rid of macro_constant
all_factor_names <- c(macro_factor_names, individual_factor_names)[-1]
test_x <- test[4:ncol(test)]
# Specify .packages = "quantreg" here as it seems it isn't supported and therefore is missed by doFuture
variable_importance_df <- foreach(i = (1:length(all_factor_names)), .combine = "rbind", .packages = c("speedglm", "quantreg")) %dopar% {
test_x_zero <- test_x
zero_indices <- which(str_detect(colnames(final_dataset), all_factor_names[i]) == 1)
test_x_zero[, zero_indices] <- 0
original_R2 <- R2(predict(lm_model, newdata = test_x), test$rt, form = "traditional")
new_R2 <- R2(predict(lm_model, newdata = test_x_zero), test$rt, form = "traditional")
variable_importance <- data.frame(variable = all_factor_names[i], importance = (original_R2 - new_R2))
variable_importance
}
variable_importance_df
}
# Penalized Linear Model
ELN_variable_importance <- function(test, eln_model, alpha, lambda,
macro_factor_names, individual_factor_names) {
all_factor_names <- c(macro_factor_names, individual_factor_names)[-1]
test_x <- as.matrix(test[4:ncol(test)])
variable_importance_df <- foreach(i = (1:length(test_x)), .combine = "rbind") %dopar% {
test_x_zero <- test_x
zero_indices <- which(str_detect(colnames(final_dataset), all_factor_names[i]) == 1)
test_x_zero[, zero_indices] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = all_factor_names[i], importance = (original_R2 - new_R2))
variable_importance
}
variable_importance_df
}
# Random Forest
RF_variable_importance <- function(test, rf_model,
macro_factor_names, individual_factor_names) {
all_factor_names <- c(macro_factor_names, individual_factor_names)[-1]
test_x <- test[4:ncol(test)]
variable_importance_df <- foreach(i = (1:length(test_x)), .combine = "rbind", .packages = "randomForestSRC") %dopar% {
test_x_zero <- test_x
zero_indices <- which(str_detect(colnames(final_dataset), all_factor_names[i]) == 1)
test_x_zero[, zero_indices] <- 0
original_R2 <- R2(predict(rf_model, newdata = test_x)$predicted, test$rt, form = "traditional")
new_R2 <- R2(predict(rf_model, newdata = test_x_zero)$predicted, test$rt, form = "traditional")
variable_importance <- data.frame(variable = all_factor_names[i], importance = (original_R2 - new_R2))
variable_importance
}
variable_importance_df
}
# Neural Network
# Unfortunately it seems that the tensorflow/keras backend does not work with foreach, so a standard for loop is needed instead
NNet_variable_importance <- function(test, nnet_model,
macro_factor_names, individual_factor_names) {
all_factor_names <- c(macro_factor_names, individual_factor_names)[-1]
test_x <- test[4:ncol(test)]
variable_importance_df <- foreach(i = (1:length(test_x)), .combine = "rbind", .packages = c("keras", "tensorflow", "reticulate")) %do% {
test_x_zero <- test_x
zero_indices <- which(str_detect(colnames(final_dataset), all_factor_names[i]) == 1)
test_x_zero[, zero_indices] <- 0
original_R2 <- R2(predict(nnet_model, as.matrix(test_x)), test$rt, form = "traditional")
new_R2 <- R2(predict(nnet_model, as.matrix(test_x_zero)), test$rt, form = "traditional")
variable_importance <- data.frame(variable = all_factor_names[i], importance = (original_R2 - new_R2))
variable_importance
}
variable_importance_df
}
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse", f,
macro_factor_names, individual_factor_names)
# Test on fitting actual data
# Lots of memory issues, need to change fit functions so that they are more memory efficient
options(future.globals.maxSize = 1.5e+9)
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse", f,
macro_factor_names, individual_factor_names)
LM_stats_mse[[1]]$loss_stats
LM_stats_mse[[1]]$variable_importance %>%
arrange(desc(importance))
LM_stats_mse[[2]]$variable_importance %>%
arrange(desc(importance))
colnames(final_dataset)
# This function is working
# Some immediate problems: columns which were on a very large scale (such a company value mvel1) are still very large (ranging from 0.96 - 1 in value)
datashare_normalized <- cross_section_normalize(datashare_imputed) %>%
mutate(time = as.yearqtr(time)) %>%
# Rename some factors
mutate(beta1 = beta) %>%
select(-beta) %>%
# Make the names clearer
rename_at(vars(-time, -stock, -rt), function(x) paste0("ind_", x))
interaction_formula <- as.formula(c("~ ", paste(interaction_terms, collapse = "+")))
datashare_combined <- full_join(macro_predictors, datashare_normalized, by = "time") %>%
# Create Excess Returns
mutate(rt = rt - macro_Rfree) %>%
select(-macro_Rfree) %>%
# Reorder
select(time, stock, rt, macro_constant,
macro_bm, macro_dfy, macro_dp, macro_ep, macro_ntis, macro_svar, macro_tbl, macro_tms,
everything())
interaction_formula_dummyVars <- dummyVars(interaction_formula, data = datashare_combined)
# Testing if it works
final_dataset_x <- (predict(interaction_formula_dummyVars, datashare_combined))
# Strap on the stock, time and rt columns to this
final_dataset <- data.frame(stock = datashare_combined$stock,
time = datashare_combined$time,
rt = datashare_combined$rt,
final_dataset_x)
rm(final_dataset_x)
# Double Check
colnames(final_dataset)
f <- real_panel_formula(final_dataset)
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse", f,
macro_factor_names, individual_factor_names)
