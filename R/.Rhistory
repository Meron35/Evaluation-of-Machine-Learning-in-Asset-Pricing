bold = if_else(test_MSE == min(test_MSE), 1, 0)),
test_RSquare = cell_spec(round(test_RSquare, 6), format = "latex",
bold = if_else(test_RSquare == max(test_RSquare), 1, 0))) %>%
rename(`Test MAE` = test_MAE, `Test MSE` = test_MSE, `Test $R^2$` = test_RSquare)
top_models_fix <- data.frame(model = top_models) %>%
mutate(model = str_replace(model, "_", "."))
empirical_loss_latex <- cbind(top_models_fix,
empirical_results_df_sam_1,
empirical_results_df_sam_2,
empirical_results_df_sam_3) %>%
kable(align = "c", format = "latex", booktabs = T,
escape = F, digits = 6,
caption = "Top 5 models in empirical study") %>%
add_header_above(c(" " = 1, "Sample 1" = 3, "Sample 2" = 3, "Sample 3" = 3)) %>%
kable_styling(font_size = 6)
empirical_loss_latex %>%
cat(file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_loss_latex_small.tex")
## Function to filter out ind and macro dfs
filter_vi_df <- function(variable_importance_df, type ){
if(type == "ind") {
variable_importance_df %>%
filter(str_detect(variable, "ind_"))
} else {
variable_importance_df %>%
filter(str_detect(variable, "macro_"))
}
}
normalize_variable_importance <- function(variable_importance_df) {
variable_importance_df %>%
# Add a very very tiny value so that division by zero does not occur
mutate(importance = importance + 1e-100) %>%
mutate(importance = importance + abs(min(importance))) %>%
mutate(importance = importance/sum(importance))
}
empirical_tidy_vi_all <- foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(model = "LM_MSE", sample = sample, normalize_variable_importance(LM_stats_mse[[sample]]$variable_importance)),
cbind(model = "LM_MAE", sample = sample, normalize_variable_importance(LM_stats_mae[[sample]]$variable_importance)),
cbind(model = "ELN_MSE", sample = sample, normalize_variable_importance(ELN_stats_mse[[sample]]$variable_importance)),
cbind(model = "ELN_MAE", sample = sample, normalize_variable_importance(ELN_stats_mae[[sample]]$variable_importance)),
cbind(model = "RF_MSE", sample = sample, normalize_variable_importance(RF_mse_stats[[sample]]$variable_importance)),
cbind(model = "RF_MAE", sample = sample, normalize_variable_importance(RF_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN1_MSE", sample = sample, normalize_variable_importance(NNet_1_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN1_MAE", sample = sample, normalize_variable_importance(NNet_1_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN2_MSE", sample = sample, normalize_variable_importance(NNet_2_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN2_MAE", sample = sample, normalize_variable_importance(NNet_2_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN3_MSE", sample = sample, normalize_variable_importance(NNet_3_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN3_MAE", sample = sample, normalize_variable_importance(NNet_3_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN4_MSE", sample = sample, normalize_variable_importance(NNet_4_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN4_MAE", sample = sample, normalize_variable_importance(NNet_4_mae_stats[[sample]]$variable_importance)),
cbind(model = "NN5_MSE", sample = sample, normalize_variable_importance(NNet_5_mse_stats[[sample]]$variable_importance)),
cbind(model = "NN5_MAE", sample = sample, normalize_variable_importance(NNet_5_mae_stats[[sample]]$variable_importance))
)
}
empirical_tidy_vi_all <- empirical_tidy_vi_all %>%
arrange(as.character((variable))) %>%
mutate(variable = factor(as.character(variable), levels= unique(sort(as.character(variable)))))
write.csv(empirical_tidy_vi_all, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_tidy_vi.csv")
## By factor type
empirical_tidy_vi_ind <- foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(model = "LM_MSE", sample = sample,
LM_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "LM_MAE", sample = sample,
LM_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "ELN_MSE", sample = sample,
ELN_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "ELN_MAE", sample = sample,
ELN_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "RF_MSE", sample = sample,
RF_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "RF_MAE", sample = sample,
RF_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN1_MSE", sample = sample,
NNet_1_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN1_MAE", sample = sample,
NNet_1_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN2_MSE", sample = sample,
NNet_2_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN2_MAE", sample = sample,
NNet_2_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN3_MSE", sample = sample,
NNet_3_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN3_MAE", sample = sample,
NNet_3_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN4_MSE", sample = sample,
NNet_4_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN4_MAE", sample = sample,
NNet_4_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN5_MSE", sample = sample,
NNet_5_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance()),
cbind(model = "NN5_MAE", sample = sample,
NNet_5_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("ind") %>%
normalize_variable_importance())
)
}
empirical_tidy_vi_ind <- empirical_tidy_vi_ind %>%
arrange(as.character(variable)) %>%
mutate(variable = factor(as.character(variable), levels= unique(sort(as.character(variable)))))
write.csv(empirical_tidy_vi_ind, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_tidy_vi_ind.csv")
empirical_tidy_vi_macro <- foreach(sample = 1:3, .combine = "rbind") %do% {
rbind(
cbind(model = "LM_MSE", sample = sample,
LM_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "LM_MAE", sample = sample,
LM_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "ELN_MSE", sample = sample,
ELN_stats_mse[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "ELN_MAE", sample = sample,
ELN_stats_mae[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "RF_MSE", sample = sample,
RF_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "RF_MAE", sample = sample,
RF_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN1_MSE", sample = sample,
NNet_1_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN1_MAE", sample = sample,
NNet_1_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN2_MSE", sample = sample,
NNet_2_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN2_MAE", sample = sample,
NNet_2_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN3_MSE", sample = sample,
NNet_3_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN3_MAE", sample = sample,
NNet_3_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN4_MSE", sample = sample,
NNet_4_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN4_MAE", sample = sample,
NNet_4_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN5_MSE", sample = sample,
NNet_5_mse_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance()),
cbind(model = "NN5_MAE", sample = sample,
NNet_5_mae_stats[[sample]]$variable_importance %>%
filter_vi_df("macro") %>%
normalize_variable_importance())
)
}
empirical_tidy_vi_macro <- empirical_tidy_vi_macro %>%
arrange(as.character(variable)) %>%
mutate(variable = factor(as.character(variable), levels= unique(sort(as.character(variable)))))
write.csv(empirical_tidy_vi_macro, file = "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_tidy_vi_macro.csv")
empirical_tidy_vi_ind
empirical_tidy_all_vi <- rbind(empirical_tidy_vi_ind, empirical_tidy_vi_macro)
empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Individual factors")
a4_aspect_ratio <- 1.4
## First find the top individual factors across all samples & methods
## Note that because Market Value is very beloved by the MLPs but none of the other methods, you need to keep at least the top 20 variables to see this effect
top_variables <- empirical_tidy_vi_ind %>%
group_by(variable) %>%
summarise(importance = mean(importance)) %>%
arrange(desc(importance)) %>%
head(20) %>%
dplyr::select(variable) %>%
pull() %>%
as.vector()
## All sample variable importance
empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Individual factors")
empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance)))
## All sample variable importance
empirical_vi_ind_plot <- empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Individual factors")
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance)))
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect')
## All sample variable importance
empirical_vi_ind_plot <- empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Individual factors")
## All sample variable importance
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance)))
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_macro.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect')
?quantile
## All sample variable importance
empirical_vi_ind_plot <- empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(quantile(empirical_tidy_vi_all$importance, 0.25),
quantile(empirical_tidy_vi_all$importance, 0.75))) +
ggtitle("Individual factors")
## All sample variable importance
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance)))
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect')
empirical_vi_ind_plot <- empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(quantile(empirical_tidy_vi_all$importance, 0.10),
quantile(empirical_tidy_vi_all$importance, 0.90))) +
ggtitle("Individual factors")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_ind.pdf",
width = 12, height = 5, units = "cm")
## All sample variable importance
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance)))
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_macro.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect')
## All sample variable importance
empirical_vi_ind_plot <- empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Individual factors")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_macro.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect')
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect') +
plot_layout(widths = c(2, 1))
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Macroeconomic factors")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_macro.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect') +
plot_layout(widths = c(2, 1))
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Macro factors")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_macro.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect') +
plot_layout(widths = c(2, 1))
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot <- empirical_tidy_vi_ind %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
mutate(variable = fct_reorder(variable, importance)) %>%
filter(variable %in% top_variables) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(size = rel(0.9), angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(size = rel(0.9))) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Individual factors")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_ind.pdf",
width = 12, height = 5, units = "cm")
## All sample variable importance
empirical_vi_macro_plot <- empirical_tidy_vi_macro %>%
filter(model %in% top_models) %>%
# Average importance over all training samples
group_by(model, variable) %>%
summarise(importance = mean(importance)) %>%
ggplot() +
geom_tile(aes(x = variable, y = model, fill = importance)) +
theme_bw() +
theme(axis.text.x = element_text(size = rel(0.9), angle = 90, hjust = 1)) +
theme(axis.text.y = element_text(size = rel(0.9))) +
theme(legend.position = "right") +
scale_fill_distiller(palette = "Spectral",
limits = c(min(empirical_tidy_vi_all$importance),
max(empirical_tidy_vi_all$importance))) +
ggtitle("Macro factors")
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi_macro.pdf",
width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect') +
plot_layout(widths = c(2, 1))
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi.pdf", width = 8, height = 5, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect') +
plot_layout(widths = c(2, 1))
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi.pdf", width = 18, height = 9, units = "cm")
empirical_vi_ind_plot + empirical_vi_macro_plot +
plot_layout(guides = 'collect') +
plot_layout(widths = c(2, 1))
ggsave(filename= "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/Results/empirical/empirical_all_sample_vi.pdf", width = 18, height = 6, units = "cm")
