LM_stats[[set]]$loss_stats$validation_RSquare <- R2(validation_predict, validation$rt, form = "traditional")
#Test Set Statistics
test_predict <- predict(lm, newdata = test)
LM_stats[[set]]$loss_stats$test_MAE <- mae(test$rt, test_predict)
LM_stats[[set]]$loss_stats$test_MSE <- mse(test$rt, test_predict)
LM_stats[[set]]$loss_stats$test_RMSE <- rmse(test$rt, test_predict)
LM_stats[[set]]$loss_stats$test_RSquare <- R2(test_predict, test$rt, form = "traditional")
#Forecasts
LM_stats[[set]]$forecasts <- test_predict
#Forecast Residuals
LM_stats[[set]]$forecast_resids <- test$rt - test_predict
#Variable Importance
LM_stats[[set]]$variable_importance <- LM_variable_importance(test, lm)
}
return(LM_stats)
}
# test
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse")
real_panel_formula <- function(panel){
#Remove the first 3 colNames, as these correspond to the return, time and stock id
panel_colnames <- colnames(panel)[-c(1:3)]
f <- as.formula(c("rt ~", paste(panel_colnames, collapse = "+")))
return(f)
}
f <- real_panel_formula(pooled_panel)
f <- real_panel_formula(final_dataset)
# test
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse")
# test
LM_stats_mse <- LM_fit(final_dataset, realdata_timeSlices, "mse", f)
LM_stats_mse[[1]]$loss_stats
LM_stats_mse[[1]]$forecasts
LM_stats_mse[[1]]$variable_importance
g1_A1_panel[[1]]$panel
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(readr)
library(zoo)
library(readxl)
library(Matrix)
library(tidyimpute)
install.packages("tidyimpute")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(readr)
library(zoo)
library(readxl)
library(Matrix)
library(tidyimpute)
#Parallel Computing
library(foreach)
library(doFuture)
install.packages("future")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(readr)
library(zoo)
library(readxl)
library(Matrix)
library(tidyimpute)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
#################################################
# Load RAW data courtesy of Gu et al
#################################################
# This is about ~ 3GB in size in total
# Note that because the honours lab computers don't have their own hard drives (files are stored on some network location), this initial loading processis very slow (bottlenecked by network speed)
datashare_RAW <- read_csv("data/datashare/datashare.csv",
# Always make sure to force col_types so that read_csv doesn't assume weird stuff
col_types = cols(.default = "d"))
# Export stock IDs so that we can query WRDS returns
# WRDS wants a txt file with one code per line and nothing else
datashare_stock_ids <- unique(datashare_RAW$permno)
write.table(datashare_stock_ids, file = "datashare_stock_ids.txt", sep = " ",
row.names = FALSE, col.names = FALSE)
# datashare with RET, Prices, and primary exchange
datashare_RET_RAW <- read_csv("data/datashare/datashare_PRC.csv") %>%
# Rename some columns
mutate(DATE = date) %>%
select(-date) %>%
mutate(permno = PERMNO) %>%
select(-PERMNO)
# It seems that datashare with RET has more rows than the datashare file
# Full join them for now
datashare_RAW_join <- full_join(datashare_RAW, datashare_RET_RAW, by = c("permno", "DATE")) %>%
# Reorder variables
mutate(stock = permno) %>%
select(-permno) %>%
select(DATE, stock, PRC, everything())
colnames(datashare_RAW_join)
head(datashare_RAW_join)
rm(datashare_RAW)
rm(datashare_RET_RAW)
datashare <- datashare_RAW_join %>%
mutate(time = as.yearmon(as.character(DATE), "%Y%m%d")) %>%
select(-DATE) %>%
# Generate log prices
# Drop RET which is monthly return
select(time, stock, PRC, -RET, everything()) %>%
# Filter so that we only have NASDAQ stocks
# Remember that the NASDAQ only opened in 1971 ish
filter(PRIMEXCH == "Q") %>%
select(-PRIMEXCH) %>%
# Negative PRC means that there was no closing price, and the dash denotes the bid ask average instead
# Not too unreasonable to just take this as the actual price
# Note that PRC has not been corrected for stock splits etc. This is more sensible for modelling purposes
mutate(PRC = abs(PRC)) %>%
# Prices of 0 mean that neither the bid ask average or price were available, ie missing
filter(PRC != 0) %>%
# Filter out PRC < 5 to get rid of penny stocks
filter(PRC >= 5) %>%
# Filter out so that only shares with share codes of 10 or 11 are included (other codes refer to other instruments such as REITs, etc)
# Don't have any idea why Gu et al thought this was originally sensible
filter(SHRCD == 10 | SHRCD == 11) %>%
select(-SHRCD) %>%
# SIC codes according to WRDS/CRSP are recommended to be used with caution, as they are not strictly enforced
# Companies can also belong in multiple SIC codes, or change SIC codes over time. This is not adequately captured by CRSP
# Also don't make much consistent sense either
# Personal decision: drop them entirely
select(-sic2) %>%
# We will construct quarterly returns using the end of each month
# Ie using the 3rd, 6th, 9th and 12th month of each year
# yearmon stores year + 0 for January. Exploit this to filter out non-quarter months
filter((as.yearmon(time) %% 1) == 2/12 | (as.yearmon(time) %% 1) == 5/12 | (as.yearmon(time) %% 1) == 8/12 | (as.yearmon(time) %% 1) == 11/12) %>%
# Convert time to yearqtr format
# yearqtr stores data as year + 0/4 for q1, 1/4 for q2, etc
mutate(time = as.yearqtr(time - 2/12)) %>%
select(-RET)
datashare_sample <- sample_frac(datashare, 0.25)
write.csv(datashare_sample, file = "datashare_sample.csv")
## Generate quarterly returns
## This approach keeps companies that were were unlisted and relisted
## Sensible, because companies can be bought out and floated again, etc.
## Not likely to make a huge difference, but actual quarterly returns are computed, instead of log quarterly returns
## This is because stock prices can in some cases have rather large movements over a quarter
time_df <- data.frame(time = unique(datashare$time)) %>%
mutate(time = as.numeric(time))
datashare <- foreach(i = (1:length(unique(datashare$stock))), .combine = rbind) %dopar% {
datashare_stock <- datashare %>%
mutate(time = as.numeric(time)) %>%
filter(stock == unique(datashare$stock)[i]) %>%
full_join(time_df, by = "time") %>%
arrange(time) %>%
mutate(RET_M = (PRC - lag(PRC))/lag(PRC)) %>%
drop_na(RET_M)
datashare_stock
}
# Reorder (again)
datashare <- datashare %>%
select(time, stock, PRC, RET_M, everything()) %>%
mutate(time = as.yearqtr(time))
# Check Missing data stats
# Missing data tends to get a bit better as time goes forward
# Therefore conduct this with
# Rule of thumb: drop any column missing more than 20% of data
# Best trade off between missing columns and maintaing a large dataset seems to be cutting it off ~1990s.
missing_factors <- datashare %>%
# Change time filtering here
filter(time >= 1993.5) %>%
gather(col, value) %>%
group_by(col) %>%
summarize(missing_share = mean(is.na(value))) %>%
filter(missing_share > 0.20)
## Remove previously identified factors
datashare_filtered <- datashare %>%
filter(time >= 1993.5) %>%
select(-c(missing_factors$col))
# Dealing with Missing characteristics
# Function to impute missing characteristics with their CROSS SECTIONAL median (as with gu et al) or mean (conventional) for each stock
# THIS FUNCTION WORKS PROPERLY, HOWEVER THE DATASET HAS TOO MUCH MISSING DATA
# Many of the earlier cross sections are completely missing any sort of data for some characteristics
# This means that it is impossible to impute a cross sectional mean/median
# The foreach loop may through some errors if this is the case but will still function correctly, check the output to see which exact factors are missing
# Don't know how Gu et al did this
# Function to calculate cross sectional medians/means from panel dataset, mainly for checking purposes
# Assumes that the dataset has a "time" column
# doFuture has a maxsize default of around 500 MB
# In the current setting this is sufficient for our dataset, but you can set the maxsize to something larger like so:
#options(future.globals.maxSize = 3e+9)
cross_sectional_values <- function(dataset, impute_type) {
time_periods <- unique(dataset$time)
cross_sectional_values_df <- foreach(t = 1:length(time_periods), .combine = "rbind") %dopar% {
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
# Mean Case
if (impute_type == "mean") {
cross_sectional_values <- dataset_cross_section %>%
summarize_all(mean, na.rm = TRUE) %>%
mutate(time = as.yearqtr(time))
}
# Median Case
else {
cross_sectional_values <- dataset_cross_section %>%
summarize_all(median, na.rm = TRUE) %>%
mutate(time = as.yearqtr(time))
}
cross_sectional_values
}
cross_sectional_values_df
}
test <- cross_sectional_values(datashare_filtered, impute_type = "median")
# Checks to see if there are any time periods where there is no cross sectional imputation possible due to missing data
# Looks all good
cbind(test$time, (test)[colSums(is.na(test)) > 0])
colnames(test)[colSums(is.na(test)) > 0]
# Function to impute cross sectional values
impute_cross_section <- function(dataset, impute_type) {
time_periods <- unique(dataset$time)
imputed_cross_section_df <- foreach(t = 1:length(time_periods), .combine = "rbind") %dopar% {
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
if (impute_type == "median") {
# Impute the median for ALL columns
dataset_cross_section %>%
impute_median()
} else {
dataset_cross_section %>%
impute_mean()
}
}
imputed_cross_section_df
}
datashare_imputed <- impute_cross_section(datashare_filtered, impute_type = "median")
# Summary Statistics
summary(datashare_imputed)
length(unique(datashare_imputed$stock))
ncol(datashare_filtered)
## With that... FINISHED CLEANING DATASHARE
## We still have ~70 or so factors left, not too bad
# Final imputed dataset is ~100mb in size, quite manageable
colnames(test)[colSums(is.na(test)) > 0]
datashare_imputed
colnames(datashare_imputed)
datashare_imputed <- datashare_imputed %>%
select(-PRC)
colnames(datashare_imputed)
datashare <- foreach(i = (1:length(unique(datashare$stock))), .combine = rbind) %dopar% {
datashare_stock <- datashare %>%
mutate(time = as.numeric(time)) %>%
filter(stock == unique(datashare$stock)[i]) %>%
full_join(time_df, by = "time") %>%
arrange(time) %>%
mutate(rt = (PRC - lag(PRC))/lag(PRC)) %>%
drop_na(rt)
datashare_stock
}
# Reorder (again)
datashare <- datashare %>%
select(time, stock, rt, everything()) %>%
select(-PRC) %>%
mutate(time = as.yearqtr(time))
missing_factors <- datashare %>%
# Change time filtering here
filter(time >= 1993.5) %>%
gather(col, value) %>%
group_by(col) %>%
summarize(missing_share = mean(is.na(value))) %>%
filter(missing_share > 0.20)
## Remove previously identified factors
datashare_filtered <- datashare %>%
filter(time >= 1993.5) %>%
select(-c(missing_factors$col))
cross_sectional_values <- function(dataset, impute_type) {
time_periods <- unique(dataset$time)
cross_sectional_values_df <- foreach(t = 1:length(time_periods), .combine = "rbind") %dopar% {
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
# Mean Case
if (impute_type == "mean") {
cross_sectional_values <- dataset_cross_section %>%
summarize_all(mean, na.rm = TRUE) %>%
mutate(time = as.yearqtr(time))
}
# Median Case
else {
cross_sectional_values <- dataset_cross_section %>%
summarize_all(median, na.rm = TRUE) %>%
mutate(time = as.yearqtr(time))
}
cross_sectional_values
}
cross_sectional_values_df
}
test <- cross_sectional_values(datashare_filtered, impute_type = "median")
# Checks to see if there are any time periods where there is no cross sectional imputation possible due to missing data
# Looks all good
cbind(test$time, (test)[colSums(is.na(test)) > 0])
colnames(test)[colSums(is.na(test)) > 0]
datashare_imputed <- impute_cross_section(datashare_filtered, impute_type = "median")
colnames(datashare_imputed)
colnames(datashare)
datashare <- datashare_RAW_join %>%
mutate(time = as.yearmon(as.character(DATE), "%Y%m%d")) %>%
select(-DATE) %>%
# Generate log prices
# Drop RET which is monthly return
select(time, stock, PRC, -RET, everything()) %>%
# Filter so that we only have NASDAQ stocks
# Remember that the NASDAQ only opened in 1971 ish
filter(PRIMEXCH == "Q") %>%
select(-PRIMEXCH) %>%
# Negative PRC means that there was no closing price, and the dash denotes the bid ask average instead
# Not too unreasonable to just take this as the actual price
# Note that PRC has not been corrected for stock splits etc. This is more sensible for modelling purposes
mutate(PRC = abs(PRC)) %>%
# Prices of 0 mean that neither the bid ask average or price were available, ie missing
filter(PRC != 0) %>%
# Filter out PRC < 5 to get rid of penny stocks
filter(PRC >= 5) %>%
# Filter out so that only shares with share codes of 10 or 11 are included (other codes refer to other instruments such as REITs, etc)
# Don't have any idea why Gu et al thought this was originally sensible
filter(SHRCD == 10 | SHRCD == 11) %>%
select(-SHRCD) %>%
# SIC codes according to WRDS/CRSP are recommended to be used with caution, as they are not strictly enforced
# Companies can also belong in multiple SIC codes, or change SIC codes over time. This is not adequately captured by CRSP
# Also don't make much consistent sense either
# Personal decision: drop them entirely
select(-sic2) %>%
# We will construct quarterly returns using the end of each month
# Ie using the 3rd, 6th, 9th and 12th month of each year
# yearmon stores year + 0 for January. Exploit this to filter out non-quarter months
filter((as.yearmon(time) %% 1) == 2/12 | (as.yearmon(time) %% 1) == 5/12 | (as.yearmon(time) %% 1) == 8/12 | (as.yearmon(time) %% 1) == 11/12) %>%
# Convert time to yearqtr format
# yearqtr stores data as year + 0/4 for q1, 1/4 for q2, etc
mutate(time = as.yearqtr(time - 2/12)) %>%
select(-RET)
colnames(datashare)
datashare <- foreach(i = (1:length(unique(datashare$stock))), .combine = rbind) %dopar% {
datashare_stock <- datashare %>%
mutate(time = as.numeric(time)) %>%
filter(stock == unique(datashare$stock)[i]) %>%
full_join(time_df, by = "time") %>%
arrange(time) %>%
mutate(rt = (PRC - lag(PRC))/lag(PRC)) %>%
drop_na(rt)
datashare_stock
}
# Reorder (again)
datashare <- datashare %>%
select(time, stock, rt, everything()) %>%
select(-PRC) %>%
mutate(time = as.yearqtr(time))
missing_factors <- datashare %>%
# Change time filtering here
filter(time >= 1993.5) %>%
gather(col, value) %>%
group_by(col) %>%
summarize(missing_share = mean(is.na(value))) %>%
filter(missing_share > 0.20)
## Remove previously identified factors
datashare_filtered <- datashare %>%
filter(time >= 1993.5) %>%
select(-c(missing_factors$col))
datashare_imputed <- impute_cross_section(datashare_filtered, impute_type = "median")
datashare_imputed <- datashare_imputed %>%
select(-PRC)
colnames(datashare_imputed)
## Function to cross sectionally normalize characteristics
# Lots of different approaches, we'll stick with the rank transformation of only the individual charcteristics for each cross section and leave the macro economic factors untouched
# This is consistent with what we did in the simulation exercise
cross_section_normalize <- function(dataset) {
time_periods <- unique(dataset$time)
normalize_cross_section_df <- foreach(t = 1:length(time_periods), .combine = "rbind") %dopar% {
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
dataset_cross_section_y <- dataset_cross_section %>%
select(time, stock, rt)
dataset_cross_section_x <- dataset_cross_section %>%
select(-time, -stock, -rt)
dataset_cross_section_x_norm <- data.frame(data = matrix(rank(dataset_cross_section_x),
ncol = ncol(dataset_cross_section_x),
nrow = nrow(dataset_cross_section_x)))
colnames(dataset_cross_section_x_norm) <- colnames(dataset_cross_section_x)
cbind(dataset_cross_section_y, dataset_cross_section_x_norm)
}
normalize_cross_section_df
}
datashare_normalized <- cross_section_normalize(datashare_imputed)
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(readr)
library(zoo)
library(readxl)
library(Matrix)
library(tidyimpute)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
## Function to cross sectionally normalize characteristics
# Lots of different approaches, we'll stick with the rank transformation of only the individual charcteristics for each cross section and leave the macro economic factors untouched
# This is consistent with what we did in the simulation exercise
cross_section_normalize <- function(dataset) {
time_periods <- unique(dataset$time)
normalize_cross_section_df <- foreach(t = 1:length(time_periods), .combine = "rbind") %dopar% {
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
dataset_cross_section_y <- dataset_cross_section %>%
select(time, stock, rt)
dataset_cross_section_x <- dataset_cross_section %>%
select(-time, -stock, -rt)
dataset_cross_section_x_norm <- data.frame(data = matrix(rank(dataset_cross_section_x),
ncol = ncol(dataset_cross_section_x),
nrow = nrow(dataset_cross_section_x)))
colnames(dataset_cross_section_x_norm) <- colnames(dataset_cross_section_x)
cbind(dataset_cross_section_y, dataset_cross_section_x_norm)
}
normalize_cross_section_df
}
datashare_normalized <- cross_section_normalize(datashare_imputed)
t = 1
dataset <- datashare_imputed
time_periods <- unique(dataset$time)
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
dataset_cross_section_y <- dataset_cross_section %>%
select(time, stock, rt)
dataset_cross_section_x <- dataset_cross_section %>%
select(-time, -stock, -rt)
dataset_cross_section_x_norm <- data.frame(data = matrix(rank(dataset_cross_section_x),
ncol = ncol(dataset_cross_section_x),
nrow = nrow(dataset_cross_section_x)))
matrix(rank(dataset_cross_section_x),
ncol = ncol(dataset_cross_section_x),
nrow = nrow(dataset_cross_section_x))
rank(datashare_cross_section_x)
rank(dataset_cross_section_x)
typeof(dataset_cross_section_x)
rank(matrix(dataset_cross_section_x))
rank(data.frame(dataset_cross_section_x))
## Function to cross sectionally normalize characteristics
# Lots of different approaches, we'll stick with the rank transformation of only the individual charcteristics for each cross section and leave the macro economic factors untouched
# This is consistent with what we did in the simulation exercise
cross_section_normalize <- function(dataset) {
time_periods <- unique(dataset$time)
normalize_cross_section_df <- foreach(t = 1:length(time_periods), .combine = "rbind") %dopar% {
dataset_cross_section <- dataset %>%
filter(time == time_periods[t])
dataset_cross_section_y <- dataset_cross_section %>%
select(time, stock, rt)
dataset_cross_section_x <- dataset_cross_section %>%
select(-time, -stock, -rt)
dataset_cross_section_x_norm <- data.frame(
data = (2/(nrow(dataset_cross_section_x)*ncol(dataset_cross_section_x) + 1)) *
matrix(rank(data.frame(dataset_cross_section_x)),
ncol = ncol(dataset_cross_section_x),
nrow = nrow(dataset_cross_section_x)
) -
matrix(data = 1,
ncol = ncol(dataset_cross_section_x),
nrow = nrow(dataset_cross_section_x)
)
)
colnames(dataset_cross_section_x_norm) <- colnames(dataset_cross_section_x)
cbind(dataset_cross_section_y, dataset_cross_section_x_norm)
}
normalize_cross_section_df
}
datashare_normalized <- cross_section_normalize(datashare_imputed)
summaru(datashare_normalized)
summary(datashare_normalized)
