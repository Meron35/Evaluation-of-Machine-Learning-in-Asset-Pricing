library(randomForestSRC)
library(hqreg)
library(caret)
library(tsfeatures)
## Vector arima/garch packages
library(xts)
library(uwot)
library(rugarch)
## SPecial xgboost instructions
# CLone my forked version of xgboost with multiclass fix
# Set working directoty the r pakcage folder of that repo
# setwd('C:/Users/Zeyu Zhong/Documents/GitHub/xgboost/R-package')
# install.packages('.', repos = NULL, type="source")
# Other alternative
library(xgboost)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
LSTM_fit_stats <- function(pooled_panel, timeSlices, loss_function, batch_size, patience) {
## Initialize
LSTM_stats <- rep(list(0), 3)
## Loop over different timeslices
for (set in 1:3) {
## Important things
LSTM_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
# Keep forecasts here in for nnet objects to make sure they aren't doing something stupid
forecasts = 0,
forecast_resids = 0,
model = 0,
variable_importance = 0)
## Train, validation, test
## Scale Data first
train <- pooled_panel %>%
dplyr::filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
dplyr::filter(time %in% timeSlices[[set]]$validation)
test<- pooled_panel %>%
dplyr::filter(time %in% timeSlices[[set]]$test)
train_x <- train %>%
dplyr::select(-rt, -stock, -time)
train_x <- scale(train_x)
col_means_train <- attr(train_x, "scaled:center")
col_stddevs_train <- attr(train_x, "scaled:scale")
train_y <- train$rt
validation_x <- validation %>%
dplyr::select(-rt, -stock, -time)
validation_x <- scale(validation_x, center = col_means_train, scale = col_stddevs_train)
validation_y <- validation$rt
test_x <- test %>%
dplyr::select(-rt, -stock, -time)
test_x <- scale(test_x, center = col_means_train, scale = col_stddevs_train)
test_y <- test$rt
pooled_panel_trunc <- rbind(
cbind(rt = train_y, time = train$time, train_x),
cbind(rt = validation_y, time = validation$time, validation_x),
cbind(rt = test_y, time = test$time, test_x)
) %>%
data.frame
## Change this to array format for use with LSTMs
length <- max(timeSlices[[set]]$test) - 1
X_array <- array(data = 0, dim = c(length, 1, 80000))
Y_array <- array(data = 0, dim = c(length, 200))
for(t in 1:length) {
X_array[t, 1, ] <- pooled_panel_trunc %>%
dplyr::filter(time == t+1) %>%
dplyr::select(-rt, -time) %>%
as.matrix() %>%
as.vector()
}
for(t in 1:length) {
Y_array[t, ] <- pooled_panel_trunc %>%
dplyr::filter(time == t+1) %>%
dplyr::select(rt) %>%
as.matrix() %>%
as.vector()
}
X_array_train <- X_array[(timeSlices[[set]]$train - 1), , , drop = F]
X_array_validation <- X_array[(timeSlices[[set]]$validation - 1), , , drop = F]
X_array_test <- X_array[(timeSlices[[set]]$test - 1), , , drop = F]
Y_array_train <- Y_array[(timeSlices[[set]]$train - 1), ]
Y_array_validation <- Y_array[(timeSlices[[set]]$validation - 1), ]
Y_array_test <- Y_array[(timeSlices[[set]]$test - 1), ]
## Early stopping Callback
early_stop <- callback_early_stopping(monitor = "val_loss", patience = patience, restore_best_weights = TRUE)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 50 == 0) cat("\n")
cat(".")
}
)
## Fit the LSTM Model
l1_penalty <- 0.001
lstm_model <- keras_model_sequential() %>%
layer_lstm(units = 4, input_shape = c(1, dim(X_array_train)[3]),
return_sequences = TRUE,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("tanh") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dense(units = 4,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_dense(units = 200) %>%
layer_activation("linear") %>%
layer_flatten()
lstm_model %>% compile(loss = "mse",
optimizer = optimizer_adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999),
metrics = list("mae", "mse"))
lstm_model_fit <- lstm_model %>%
fit(X_array_train, Y_array_train, epochs = 500,
validation_data = list(X_array_validation, Y_array_validation),
batch_size = 64, shuffle = FALSE, verbose = 0,
callbacks = list(early_stop, print_dot_callback))
## Save stuff to list object
#Train
train_predict <- lstm_model %>% predict(X_array_train) %>%
as.vector()
LSTM_stats[[set]]$loss_stats$train_MAE <- mae(Y_array_train %>% as.vector(), train_predict)
LSTM_stats[[set]]$loss_stats$train_MSE <- mse(Y_array_train %>% as.vector(), train_predict)
LSTM_stats[[set]]$loss_stats$train_RMSE <- rmse(Y_array_train %>% as.vector(), train_predict)
LSTM_stats[[set]]$loss_stats$train_RSquare <- R2(train_predict, Y_array_train %>% as.vector(), form = "traditional")
#Validation
validation_predict <- lstm_model %>% predict(X_array_validation) %>%
as.vector()
LSTM_stats[[set]]$loss_stats$validation_MAE <- mae(Y_array_validation %>% as.vector(), validation_predict)
LSTM_stats[[set]]$loss_stats$validation_MSE <- mse(Y_array_validation %>% as.vector(), validation_predict)
LSTM_stats[[set]]$loss_stats$validation_RMSE <- rmse(Y_array_validation %>% as.vector(), validation_predict)
LSTM_stats[[set]]$loss_stats$validation_RSquare <- R2(validation_predict, Y_array_validation %>% as.vector(), form = "traditional")
#Test
test_predict <- lstm_model %>% predict(X_array_test) %>%
as.vector()
LSTM_stats[[set]]$loss_stats$test_MAE <- mae(Y_array_test %>% as.vector(), test_predict)
LSTM_stats[[set]]$loss_stats$test_MSE <- mse(Y_array_test %>% as.vector(), test_predict)
LSTM_stats[[set]]$loss_stats$test_RMSE <- rmse(Y_array_test %>% as.vector(), test_predict)
LSTM_stats[[set]]$loss_stats$test_RSquare <- R2(test_predict, Y_array_test %>% as.vector(), form = "traditional")
#Forecasts
LSTM_stats[[set]]$forecasts <- test_predict
#Variable Importance
LSTM_stats[[set]]$variable_importance <- LSTM_variable_importance(X_array_test, Y_array_test, test_x, lstm_model)
#Clear Kera Session
k_clear_session()
}
LSTM_stats
}
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
library(xtable)
library(randomForestSRC)
library(xts)
library(uwot)
library(rugarch)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g1_A1_sv_0.01 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g1_A1_sv_0.01.RDS")
g2_A1_sv_0.01 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g2_A1_sv_0.01.RDS")
g1_A1_sv_0.01_LSTM_results_15 <- fit_all_models_lstm(g1_A1_sv_0.01, batch_process_range)
saveRDS(g1_A1_sv_0.01_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g1_A1_sv_0.01_LSTM_results_15.rds")
g2_A1_sv_0.01_LSTM_results_15 <- fit_all_models_lstm(g2_A1_sv_0.01, batch_process_range)
View(timeSlices)
saveRDS(g2_A1_sv_0.01_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g2_A1_sv_0.01_LSTM_results_15.rds")
g1_A1_sv_0.01_LSTM_results_15[[1]]$LSTM_MSE[[1]]$loss_stats
g1_A1_sv_0.01_LSTM_results_15[[1]]$LSTM_MSE[[1]]$variable_importance %>% arrange(desc(importance))
################
##Load Libraries
################
library(speedglm)
library(tidyverse)
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(tensorflow)
library(quantreg)
library(randomForestSRC)
library(hqreg)
library(caret)
library(tsfeatures)
## Vector arima/garch packages
library(xts)
library(uwot)
library(rugarch)
## SPecial xgboost instructions
# CLone my forked version of xgboost with multiclass fix
# Set working directoty the r pakcage folder of that repo
# setwd('C:/Users/Zeyu Zhong/Documents/GitHub/xgboost/R-package')
# install.packages('.', repos = NULL, type="source")
# Other alternative
library(xgboost)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
LSTM_fit_stats <- function(pooled_panel, timeSlices, loss_function, batch_size, patience) {
## Initialize
LSTM_stats <- rep(list(0), 3)
## Loop over different timeslices
for (set in 1:3) {
## Important things
LSTM_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
# Keep forecasts here in for nnet objects to make sure they aren't doing something stupid
forecasts = 0,
forecast_resids = 0,
model = 0,
variable_importance = 0)
## Train, validation, test
## Scale Data first
train <- pooled_panel %>%
dplyr::filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
dplyr::filter(time %in% timeSlices[[set]]$validation)
test<- pooled_panel %>%
dplyr::filter(time %in% timeSlices[[set]]$test)
train_x <- train %>%
dplyr::select(-rt, -stock, -time)
train_x <- scale(train_x)
col_means_train <- attr(train_x, "scaled:center")
col_stddevs_train <- attr(train_x, "scaled:scale")
train_y <- train$rt
validation_x <- validation %>%
dplyr::select(-rt, -stock, -time)
validation_x <- scale(validation_x, center = col_means_train, scale = col_stddevs_train)
validation_y <- validation$rt
test_x <- test %>%
dplyr::select(-rt, -stock, -time)
test_x <- scale(test_x, center = col_means_train, scale = col_stddevs_train)
test_y <- test$rt
pooled_panel_trunc <- rbind(
cbind(rt = train_y, time = train$time, train_x),
cbind(rt = validation_y, time = validation$time, validation_x),
cbind(rt = test_y, time = test$time, test_x)
) %>%
data.frame
## Change this to array format for use with LSTMs
length <- max(timeSlices[[set]]$test) - 1
X_array <- array(data = 0, dim = c(length, 1, 80000))
Y_array <- array(data = 0, dim = c(length, 200))
for(t in 1:length) {
X_array[t, 1, ] <- pooled_panel_trunc %>%
dplyr::filter(time == t+1) %>%
dplyr::select(-rt, -time) %>%
as.matrix() %>%
as.vector()
}
for(t in 1:length) {
Y_array[t, ] <- pooled_panel_trunc %>%
dplyr::filter(time == t+1) %>%
dplyr::select(rt) %>%
as.matrix() %>%
as.vector()
}
X_array_train <- X_array[(timeSlices[[set]]$train - 1), , , drop = F]
X_array_validation <- X_array[(timeSlices[[set]]$validation - 1), , , drop = F]
X_array_test <- X_array[(timeSlices[[set]]$test - 1), , , drop = F]
Y_array_train <- Y_array[(timeSlices[[set]]$train - 1), ]
Y_array_validation <- Y_array[(timeSlices[[set]]$validation - 1), ]
Y_array_test <- Y_array[(timeSlices[[set]]$test - 1), ]
## Early stopping Callback
early_stop <- callback_early_stopping(monitor = "val_loss", patience = patience, restore_best_weights = TRUE)
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 50 == 0) cat("\n")
cat(".")
}
)
## Fit the LSTM Model
l1_penalty <- 0.001
lstm_model <- keras_model_sequential() %>%
layer_lstm(units = 4, input_shape = c(1, dim(X_array_train)[3]),
return_sequences = TRUE,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("tanh") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dense(units = 4,
bias_initializer = initializer_zeros(),
kernel_initializer = initializer_truncated_normal(mean = 0, stddev = 0.05, seed = NULL)) %>%
layer_activation("tanh") %>%
layer_activity_regularization(l1 = l1_penalty) %>%
layer_batch_normalization() %>%
layer_dense(units = 200) %>%
layer_activation("linear") %>%
layer_flatten()
lstm_model %>% compile(loss = "mse",
optimizer = optimizer_adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999),
metrics = list("mae", "mse"))
lstm_model_fit <- lstm_model %>%
fit(X_array_train, Y_array_train, epochs = 500,
validation_data = list(X_array_validation, Y_array_validation),
batch_size = 64, shuffle = FALSE, verbose = 0,
callbacks = list(early_stop, print_dot_callback))
## Save stuff to list object
#Train
train_predict <- lstm_model %>% predict(X_array_train) %>%
as.vector()
LSTM_stats[[set]]$loss_stats$train_MAE <- mae(Y_array_train %>% as.vector(), train_predict)
LSTM_stats[[set]]$loss_stats$train_MSE <- mse(Y_array_train %>% as.vector(), train_predict)
LSTM_stats[[set]]$loss_stats$train_RMSE <- rmse(Y_array_train %>% as.vector(), train_predict)
LSTM_stats[[set]]$loss_stats$train_RSquare <- R2(train_predict, Y_array_train %>% as.vector(), form = "traditional")
#Validation
validation_predict <- lstm_model %>% predict(X_array_validation) %>%
as.vector()
LSTM_stats[[set]]$loss_stats$validation_MAE <- mae(Y_array_validation %>% as.vector(), validation_predict)
LSTM_stats[[set]]$loss_stats$validation_MSE <- mse(Y_array_validation %>% as.vector(), validation_predict)
LSTM_stats[[set]]$loss_stats$validation_RMSE <- rmse(Y_array_validation %>% as.vector(), validation_predict)
LSTM_stats[[set]]$loss_stats$validation_RSquare <- R2(validation_predict, Y_array_validation %>% as.vector(), form = "traditional")
#Test
test_predict <- lstm_model %>% predict(X_array_test) %>%
as.vector()
LSTM_stats[[set]]$loss_stats$test_MAE <- mae(Y_array_test %>% as.vector(), test_predict)
LSTM_stats[[set]]$loss_stats$test_MSE <- mse(Y_array_test %>% as.vector(), test_predict)
LSTM_stats[[set]]$loss_stats$test_RMSE <- rmse(Y_array_test %>% as.vector(), test_predict)
LSTM_stats[[set]]$loss_stats$test_RSquare <- R2(test_predict, Y_array_test %>% as.vector(), form = "traditional")
#Forecasts
LSTM_stats[[set]]$forecasts <- test_predict
#Variable Importance
LSTM_stats[[set]]$variable_importance <- LSTM_variable_importance(X_array_test, Y_array_test, test_x, lstm_model)
#Clear Kera Session
k_clear_session()
}
LSTM_stats
}
save.image("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/.RData")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
library(xtable)
library(randomForestSRC)
library(xts)
library(uwot)
library(rugarch)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g3_A1_sv_0.01 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g3_A1_sv_0.01.RDS")
#######
g1_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g1_A1_sv_0.1.RDS")
g3_A1_sv_0.01_LSTM_results_15 <- fit_all_models_lstm(g3_A1_sv_0.01, batch_process_range)
saveRDS(g3_A1_sv_0.01_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g3_A1_sv_0.01_LSTM_results_15.rds")
g1_A1_sv_0.1_LSTM_results_15 <- fit_all_models_lstm(g1_A1_sv_0.1, batch_process_range)
saveRDS(g1_A1_sv_0.1_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g1_A1_sv_0.1_LSTM_results_15.rds")
g1_A1_sv_0.1_LSTM_results_15[[1]]$LSTM_MSE[[1]]$loss_stats
g1_A1_sv_0.1_LSTM_results_15[[1]]$LSTM_MSE[[1]]$variable_importance %>% arrange(desc(importance))
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
library(xtable)
library(randomForestSRC)
library(xts)
library(uwot)
library(rugarch)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g2_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g2_A1_sv_0.1.RDS")
g3_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g3_A1_sv_0.1.RDS")
g2_A1_sv_0.1_LSTM_results_15 <- fit_all_models_lstm(g2_A1_sv_0.1, batch_process_range)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
library(xtable)
library(randomForestSRC)
library(xts)
library(uwot)
library(rugarch)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g2_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g2_A1_sv_0.1.RDS")
g3_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g3_A1_sv_0.1.RDS")
g2_A1_sv_0.1_LSTM_results_15 <- fit_all_models_lstm(g2_A1_sv_0.1, batch_process_range)
saveRDS(g2_A1_sv_0.1_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g2_A1_sv_0.1_LSTM_results_15.rds")
g3_A1_sv_0.1_LSTM_results_15 <- fit_all_models_lstm(g3_A1_sv_0.1, batch_process_range)
saveRDS(g3_A1_sv_0.1_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g3_A1_sv_0.1_LSTM_results_15.rds")
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
library(xtable)
library(randomForestSRC)
library(xts)
library(uwot)
library(rugarch)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g3_A1_sv_1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g3_A1_sv_1.RDS")
g3_A1_sv_1_LSTM_results_15 <- fit_all_models_lstm(g3_A1_sv_1, batch_process_range)
saveRDS(g3_A1_sv_1_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g3_A1_sv_1_LSTM_results_15.rds")
View(fit_all_models_lstm)
View(LSTM_fit_stats)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(tidyverse)
library(keras)
library(quantreg)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(caret)
library(forcats)
library(xtable)
library(randomForestSRC)
library(xts)
library(uwot)
library(rugarch)
#Parallel Computing
library(foreach)
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
set.seed(27935248)
g2_A1_nosv_0 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g2_A1_nosv_0.RDS")
g3_A1_nosv_0 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g3_A1_nosv_0.RDS")
g2_A1_nosv_0_LSTM_results_15 <- fit_all_models_lstm(g2_A1_nosv_0, batch_process_range)
saveRDS(g2_A1_nosv_0_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g2_A1_nosv_0_LSTM_results_15.rds")
g3_A1_nosv_0_LSTM_results_15 <- fit_all_models_lstm(g3_A1_nosv_0, batch_process_range)
saveRDS(g3_A1_nosv_0_LSTM_results_15, "~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Model_results/g3_A1_nosv_0_LSTM_results_15.rds")
