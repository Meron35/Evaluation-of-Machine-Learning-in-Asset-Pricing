"0","###################"
"0","##characteristics C_bar"
"0","###################"
"0","#######"
"0","##Function to Generate C_bar"
"0","#######"
"0","gen_C_bar <- function(){"
"0","  #empty matrix"
"0","  elm <- matrix("
"0","    data = 0, nrow = N, ncol = P_c"
"0","  )"
"0","  "
"0","  C_bar <- rep(list(elm), Time + 2)"
"0","  "
"0","  for (t in 1:(Time+1)) {"
"0","    for (j in 1:P_c) {"
"0","      #Gu et al set rho to runif 0.9, 1"
"0","      rho <- runif(1, 0.9, 1)"
"0","      #Gu et al set error term here to be standard normal"
"0","      C_bar[[t+1]][, j] <- (C_bar[[t]][, j]*rho + rnorm(N, 0, 1))"
"0","    }  "
"0","  }"
"0","  "
"0","  ##Delete first period full of zeroes"
"0","  C_bar[[1]] <- NULL"
"0","  "
"0","  return(C_bar)"
"0","}"
"0","##################################"
"0","##Generate final ""observed"" C"
"0","##################################"
"0","#Remember you need to generate C_bar and C_hat first"
"0","#This function ""observes"" characteristics by normalizing them within (-1, 1) via the rank transformation"
"0","gen_C <- function(C_matrix){"
"0","  elm <- matrix("
"0","    data = 0, nrow = N, ncol = P_c"
"0","  )"
"0","  "
"0","  C <- rep(list(elm), Time+1)"
"0","  for (t in 1:(Time+1)) {"
"0","    C[[t]] <- (2/(N*P_c+1))*"
"0","      matrix(rank(C_matrix[[t]]), nrow = N, ncol = P_c) - matrix("
"0","        data = 1, nrow = N, ncol = P_c"
"0","        )"
"0","  }"
"0","  "
"0","  return(C)"
"0","}"
