#Takes any sort of C matrix and normalizes them via rank trasnformation
gen_C <- function(C_matrix){
stock_dim <- paste0("stock_", c(1:N))
c_dim <- paste0("c_", c(1:P_c))
time_dim <- paste0("time_", c(1:(Time+1)))
C <- array(data = 0, dim = c(N, P_c, Time+1), dimnames = list(stock_dim, c_dim, time_dim))
for (t in 1:(Time+1)) {
C[, , t] <- (2/(N*P_c+1))*
rank(C_matrix[, , t]) - matrix(
data = 1, nrow = N, ncol = P_c
)
}
return(C)
}
C_bar <- gen_C_bar()
C_hat <- gen_C_hat(C_bar)
C <- gen_C(C_hat)
########################
##xt set up, original multivariate specification in proposal
########################
########################
##Specify A Matrices
########################
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
###################################
###Function to Generate xt series
###################################
#xt is a multivariate time series with 3 different series
#Generates xt series, gien A matrix specification
gen_xt <- function(A){
xt <- data.frame(x1 = c(0:Time),
x2 = c(0:Time),
x3 = c(0:Time)
)
x_dim <- paste0("x_", 1:3)
time_dim <- paste0("time_", c(0:(Time)))
xt <- array(0, dim = c(1, 3, Time+1), dimnames = list(c(row), x_dim, time_dim))
Axt <- xt
for (t in 2:(Time+1)) {
ut <- rnorm(3, mean = 0, sd = 1)
Axt[, , t] <- Axt[, , t-1] + ut
}
Axt <- Axt[, , -1]
return(Axt)
}
#########################################
##Function to plot xt
#########################################
#Transforms xt series to wide format and plots it
plot_xt <- function(xt){
xt_tidy <- cbind(t = c(1:(Time)), xt)
xt_tidy <- xt_tidy %>%
gather(series, value, -t)
ggplot(data = xt_tidy) +
geom_line(aes(x = t, y = value, colour = series))
}
xt <- gen_xt(A1)
#xt function, just for simplicity
gen_xt_univariate <- function(){
#Initialize
xt <- rep(0, Time+1)
rho <- 0.95
ut_sd <- sqrt(1 -rho^2)
xt[1] <- rnorm(1, mean = 0, sd = ut_sd)
for (t in 2:(Time+1)) {
xt[t] <- xt[t-1]*rho + rnorm(1, mean = 0, sd = ut_sd)
}
return(matrix(data = xt, ncol = 1))
}
xt_univariate <- gen_xt_univariate()
############################
##Different g() functions
############################
#Logit function, used in some specified structures
logit <- function(x){
(1 + exp(-x))^(-1)
}
#Remmeber that theta needs to be tuned later. Set up all of the functions as functions of theta
#Code these up so that they can take either the trivariate xt or univariate xt series
##############################
#g1
##############################
#Default theta, 1x3 dimensions
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
g1 <- function(C, x, i, t, theta){
#Univariate xt case
if (ncol(x) == 1) {
matrix(c(
C[i, 1, t], C[i, 2, t], C[i, 3, t] * x[t]
), nrow = 1) %*% t(theta)
}
#Multivariate Case
else {
matrix(c(
C[i, 1, t], C[i, 2, t], C[i, 3, t] * t(x[3, t])
), nrow = 1) %*% t(theta)
}
}
#test if working
g1(C, xt_univariate, 1, 1, theta)
g1(C, xt, 1, 1, theta)
##############################
#g2
##############################
#Default theta, 1x3 dimensions
theta <- matrix(c(0.04, 0.035, 0.01), nrow = 1)
g2 <- function(C, x, i, t, theta){
#Univariate Case
if (ncol(x) == 1) {
matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(
C[i, 3, t] * x[t]
)
), nrow = 1) %*% t(theta)
}
#Multivariate Case
else {
matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(
C[i, 3, t] * t(x[3, t])
)
), nrow = 1) %*% t(theta)
}
}
#test if working
g2(C, xt_univariate, 1, 1, theta)
g2(C, xt, 1, 1, theta)
#############################
#g3
#############################
#Default theta, 1x4 dimensions
theta <- matrix(c(0.04, 0.035, 0.01, 0.01), nrow = 1)
g3 <- function(C, x, i, t, theta){
#g3 does not care about xt series. Should work regardless
matrix(
c(
(C[i, 1, t] > 0),
C[i, 2, t]^3,
C[i, 1, t] * C[i, 2, t] * (C[i, 3, t] > 0),
logit(C[i, 3, t])
),
nrow = 1) %*% t(theta)
}
#test if working
g3(C, xt, 1, 1, theta)
#################################
#g4
#Remember that we are supposed to pass C hat through to g4
#################################
#Default theta, 1x3 dimensions
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
g4 <- function(C, x, i, t, theta){
#Univariate
if (ncol(x) == 1) {
matrix(c(
C[i, 1, t],
C[i, 2, t],
C[i, 3, t] * x[t]
), nrow = 1
) %*% t(theta)
}
#Multivariate
else {
matrix(c(
C[i, 1, t],
C[i, 2, t],
C[i, 3, t] * t(x[3, t])
), nrow = 1
) %*% t(theta)
}
}
#test if working
g4(C_hat, xt_univariate, 1, 1, theta)
g4(C_hat, xt, 1, 1, theta)
#################################
#################################
## Generate an entire cross section of g(), given C, x and theta
## Will be useful later
#################################
gen_g_panel <- function(g_function, C, x, theta) {
g_panel <- array(0, dim = c(N, 1, Time))
for (i in 1:N) {
for (t in 1:Time) {
g_panel[i, 1, t] <- g_function(C, x, i, t, theta)
}
}
return(g_panel)
}
#It works, yay
gen_g_panel(g1, C, xt, theta)
##################################
## Generate true factors for entire panel
## Will be used for time series and cross sectional R squared later
##################################
gen_g_factor_panel <- function(g_function, C, x, theta) {
g_name <- as.character(substitute(g_function))
#G1 case
if (g_name == "g1") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t", "c_i2,t", "c_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * x[t]), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * t(x[3, t])), nrow = 1)
}
}
}
}
#G2 Case
else if (g_name == "g2") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t^2", "c_i1,t * c_i2,t", "sgn(c_i3,t * x_t')")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t]^2, C[i, 1, t]*C[i, 2, t], sign(C[i, 3, t] * x[t])), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(C[i, 3, t] * t(x[3, t]))),
nrow = 1
)
}
}
}
}
#G3 Case
else if (g_name == "g3") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("I(c_i3,t > 0)", "c_i2,t^3", "c_i1,t * c_12,t * I(c_i3,t > 0)", "logit(c_i3,t)")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 4, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
g_factor_panel[i, , t] <- matrix(c(
(C[i, 1, t] > 0),
C[i, 2, t]^3,
C[i, 1, t] * C[i, 2, t] * (C[i, 3, t] > 0),
logit(C[i, 3, t])
), nrow = 1)
}
}
}
#G4 Case
else if (g_name == "g4") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("chat_i1,t", "chat_i2,t", "chat_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time+1)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
#Same as G1 case, but remember to pass c_hat through to this
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t]^2, C[i, 1, t]*C[i, 2, t], sign(C[i, 3, t] * x[t])), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(C[i, 3, t] * t(x[3, t]))),
nrow = 1
)
}
}
}
}
}
#test this
gen_g_factor_panel(g1, C, x, theta)
C[1, 1, 1]
C[1, 2, 1]
C{1, 3, 1}
C[1, 3, 1]
C[1, 3, 18]
i <- 1
t <- 1
matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * x[t]), nrow = 1)
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t", "c_i2,t", "c_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
g_factor_panel[1, , t]
gen_g_factor_panel(g1, C, x, theta)
g_factor_panel <- gen_g_factor_panel(g1, C, x, theta)
gen_g_factor_panel <- function(g_function, C, x, theta) {
g_name <- as.character(substitute(g_function))
#G1 case
if (g_name == "g1") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t", "c_i2,t", "c_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * x[t]), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * t(x[3, t])), nrow = 1)
}
}
}
}
#G2 Case
else if (g_name == "g2") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t^2", "c_i1,t * c_i2,t", "sgn(c_i3,t * x_t')")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t]^2, C[i, 1, t]*C[i, 2, t], sign(C[i, 3, t] * x[t])), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(C[i, 3, t] * t(x[3, t]))),
nrow = 1
)
}
}
}
}
#G3 Case
else if (g_name == "g3") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("I(c_i3,t > 0)", "c_i2,t^3", "c_i1,t * c_12,t * I(c_i3,t > 0)", "logit(c_i3,t)")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 4, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
g_factor_panel[i, , t] <- matrix(c(
(C[i, 1, t] > 0),
C[i, 2, t]^3,
C[i, 1, t] * C[i, 2, t] * (C[i, 3, t] > 0),
logit(C[i, 3, t])
), nrow = 1)
}
}
}
#G4 Case
else if (g_name == "g4") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("chat_i1,t", "chat_i2,t", "chat_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time+1)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
#Same as G1 case, but remember to pass c_hat through to this
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t]^2, C[i, 1, t]*C[i, 2, t], sign(C[i, 3, t] * x[t])), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(C[i, 3, t] * t(x[3, t]))),
nrow = 1
)
}
}
}
}
return(g_factor_panel)
}
g_factor_panel <- gen_g_factor_panel(g1, C, x, theta)
g_factor_panel
g_factor_panel <- gen_g_factor_panel(g2, C, x, theta)
g_factor_panel
head(g_factor_panel)
gen_g_factor_panel <- function(g_function, C, x) {
g_name <- as.character(substitute(g_function))
#G1 case
if (g_name == "g1") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t", "c_i2,t", "c_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * x[t]), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t], C[i, 2, t], C[i, 3, t] * t(x[3, t])), nrow = 1)
}
}
}
}
#G2 Case
else if (g_name == "g2") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("c_i1,t^2", "c_i1,t * c_i2,t", "sgn(c_i3,t * x_t')")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t]^2, C[i, 1, t]*C[i, 2, t], sign(C[i, 3, t] * x[t])), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(C[i, 3, t] * t(x[3, t]))),
nrow = 1
)
}
}
}
}
#G3 Case
else if (g_name == "g3") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("I(c_i3,t > 0)", "c_i2,t^3", "c_i1,t * c_12,t * I(c_i3,t > 0)", "logit(c_i3,t)")
time_dim <- paste0("time_", c(1:(Time)))
g_factor_panel <- array(0, dim = c(N, 4, Time), dimnames = list(stock_dim, c_dim, time_dim))
for (i in i:N) {
for (t in 1:Time) {
g_factor_panel[i, , t] <- matrix(c(
(C[i, 1, t] > 0),
C[i, 2, t]^3,
C[i, 1, t] * C[i, 2, t] * (C[i, 3, t] > 0),
logit(C[i, 3, t])
), nrow = 1)
}
}
}
#G4 Case
else if (g_name == "g4") {
stock_dim <- paste0("stock_", c(1:N))
c_dim <- c("chat_i1,t", "chat_i2,t", "chat_i3,t * x_t'")
time_dim <- paste0("time_", c(1:(Time+1)))
g_factor_panel <- array(0, dim = c(N, 3, Time), dimnames = list(stock_dim, c_dim, time_dim))
#Same as G1 case, but remember to pass c_hat through to this
for (i in i:N) {
for (t in 1:Time) {
#Univariate Case
if (ncol(x) == 1) {
g_factor_panel[i, , t] <- matrix(c(C[i, 1, t]^2, C[i, 1, t]*C[i, 2, t], sign(C[i, 3, t] * x[t])), nrow = 1)
}
#Multivariate Case
else {
g_factor_panel[i, , t] <- matrix(c(
C[i, 1, t]^2,
C[i, 1, t]*C[i, 2, t],
sign(C[i, 3, t] * t(x[3, t]))),
nrow = 1
)
}
}
}
}
return(g_factor_panel)
}
g_factor_panel <- gen_g_factor_panel(g2, C, x)
g_factor_panel <- gen_g_factor_panel(g1, C, x)
g_factor_panel
g_factor_panel <- gen_g_factor_panel(g2, C, x)
g_factor_panel
g_factor_panel <- gen_g_factor_panel(g3, C, x)
g_factor_panel
g_factor_panel <- gen_g_factor_panel(g4, C, x)
g_factor_panel
