"0","###################"
"0","##characteristics C_bar"
"0","###################"
"0","#######"
"0","##Function to Generate C_bar"
"0","#######"
"0","gen_C_bar <- function(){"
"0","  #empty matrix"
"0","  elm <- matrix("
"0","    data = 0, nrow = N, ncol = P_c"
"0","  )"
"0","  "
"0","  C_bar <- rep(list(elm), Time + 2)"
"0","  "
"0","  #Generate rho vector to be constant across time and stocks"
"0"," # rho <- runif(P_c, .9, 1)"
"0","  rho<- c(.5,.5,.5)"
"0","  # Lower values here give higher time series correlation, and lower cr"
"0","  for (t in 1:(Time+1)) {"
"0","    for (j in 1:P_c) {"
"0","      C_bar[[t+1]][, j] <- (C_bar[[t]][, j] * rho[j] + rnorm(N, 0, 1))"
"0","    }  "
"0","  }"
"0","  "
"0","  ##Delete first period full of zeroes"
"0","  C_bar[[1]] <- NULL"
"0","  "
"0","  return(C_bar)"
"0","}"
"0","#######################################"
"0","##Generate correlation matrix"
"0","#######################################"
"0","gen_W <- function(){"
"0","  "
"0","  #Generate Lambda Matrix first"
"0","  "
"0","  Lambda <- matrix("
"0","    data = rnorm(N*4, 0, 1),"
"0","    nrow = N, ncol = 4"
"0","  )"
"0","  "
"0","  #Use Lambda to create B matrix"
"0","  "
"0","  B <- (Lambda) %*% t(Lambda)"
"0","  B <- B + 1/10*diag(nrow = nrow(B))"
"0","  "
"0","  #Turn B into a correlation matrix"
"0","  "
"0","  W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)"
"0","  return(W)"
"0","}"
"0","#########################"
"0","##Generate C_hat"
"0","#########################"
"0","#This builds in the correlation from W into original C_bar"
"0","gen_C_hat <- function(){"
"0","  W <- gen_W()"
"0","  "
"0","  C_hat <- rep(list(elm), Time + 1)"
"0","  for (t in 1:(Time+1)) {"
"0","    C_hat[[t]] <- W %*% C_bar[[t]]"
"0","  }"
"0","  "
"0","  return(C_hat)"
"0","}"
"0","##################################"
"0","##Generate final ""observed"" C"
"0","##################################"
"0","#This function ""observes"" characteristics by normalizing them within (-1, 1) via the rank transformation"
"0","# DAVID: I was getting weird things here when I tried the code. So I used a 3-d array instead of a list. Easier for me to think in terms of matrices"
"0","gen_C <- function(C_matrix){"
"0"," # C <- rep(list(elm), Time+1)"
"0","  temp <- matrix(0,N,P_c)"
"0","  "
"0","  C<- array(temp,c(N,P_c,(Time+1)))"
"0","  for (t in 1:(Time+1)) {"
"0","    C[,,t] <- (2/(N*P_c+1))*"
"0","      matrix(rank(C_matrix[[t]]), nrow = N, ncol = P_c) - matrix("
"0","        data = 1, nrow = N, ncol = P_c"
"0","        )"
"0","  }"
"0","  "
"0","  return(C)"
"0","}"
