rt <- rep(list(elp), Time+1)
#########################
gu_xt <- gu_gen_xt()
#########################
for (t in 1:(Time)) {
for (i in 1:N){
rt[[t+1]][i] <- g(C, gu_xt, i, t, theta) + resid[[t+1]][i]
}
}
return(gt)
}
#Tuning Cross Sectional R Squared SKELETON CODE
#Problems, due to randomness, r squared values vary a bit between different runs
#Individual time series rsquare is too low
#Individual annualized volatility seems to be more around 25% rather than the required 30%
#Cross sectional r squared seems to be around 5%, too low
#Predictive R squared seems to OK around 5%
#Individual time series r square and cross sectional r square seem to be wrong
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
C_bar <- gen_C_bar()
C <- gen_C(C_bar)
gu_xt <- gu_gen_xt()
v_sd <- 0.05
ep_sd <- 0.05
resid <- gu_gen_rt_resid(v_sd, ep_sd)
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
g <- gu_gen_g(gu_g1)
r_squared <- function(resids, actual){
rss <- sum(resids ^ 2)  ## residual sum of squares
tss <- sum((actual) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
return(rsq)
}
r_squared_proper <- function(preds, actual){
rss <- sum((actual - preds) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
return(rsq)
}
r_squared <- function(resids, actual){
rss <- sum(resids ^ 2)  ## residual sum of squares
tss <- sum((actual) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
return(rsq)
}
r_squared_proper <- function(preds, actual){
rss <- sum(resids ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
return(rsq)
}
#Tuning Cross Sectional R Squared SKELETON CODE
#Problems, due to randomness, r squared values vary a bit between different runs
#Individual time series rsquare is too low
#Individual annualized volatility seems to be more around 25% rather than the required 30%
#Cross sectional r squared seems to be around 5%, too low
#Predictive R squared seems to OK around 5%
#Individual time series r square and cross sectional r square seem to be wrong
#We want inidividual r squared for each stock to be 50%
#We want inidividual annualized volatility to be 30%
#We want to cross sectional R squared to be 25%
#We want the predictive R squared to be 5%
#Generate paramaters first
C_bar <- gen_C_bar()
C <- gen_C(C_bar)
gu_xt <- gu_gen_xt()
v_sd <- 0.05
ep_sd <- 0.05
resid <- gu_gen_rt_resid(v_sd, ep_sd)
theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)
rt <- gu_gen_rt(gu_g1, resid)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(plm)
library(Metrics)
library(ranger)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly")
View(PredictorData2017)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(plm)
library(Metrics)
library(ranger)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly")
View(PredictorData2017)
library(zoo)
PredictorData2017_edit <- PredictorData2017 %>%
as.yearmon(yyyymm)
?as.yearmon
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(yyyymm))
View(PredictorData2017_edit)
View(PredictorData2017_edit)
?as.yearmon.Date
?yearmon
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.factor(yyyymm)))
View(PredictorData2017_edit)
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm)))
View(PredictorData2017_edit)
as.Date(187101)
?as.date
?as.Date
as.Date("1871-01")
as.yearmon("1871-01")
as.Date(as.character(187101), format = "%Y%m")
as.yearmon(as.character(187101), format = "%Y%m")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m"))
View(PredictorData2017_edit)
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
View(PredictorData2017_edit)
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm) %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m"))
View(PredictorData2017_edit)
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm) %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp)
View(PredictorData2017_edit)
?model.matrix
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm) %>%
#Generate returns %>%
mutate(logreturns = log(index - lag(index, 1))) %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp)
lag(PredictorData2017_edit$Index)
PredictorData2017_edit$Index - lag(PredictorData2017_edit$Index)
PredictorData2017_edit$Index - lag(PredictorData2017_edit$Index, 1)
?lag
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(zoo)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm) %>%
#Generate returns %>%
mutate(logreturns = log(index - lag(index, 1))) %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp)
PredictorData2017_edit$Index - lag(PredictorData2017_edit$Index, 1)
log(PredictorData2017_edit$Index - lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit$Index - lag(PredictorData2017_edit$Index, 1)
PredictorData2017_edit$Index /lag(PredictorData2017_edit$Index, 1)
log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm) %>%
#Generate returns %>%
mutate(logreturns = log(index/ lag(index, 1))) %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp)
#Generate returns
PredictorData2017_edit <- cbind(PredictorData2017_edit, (logreturns = c(log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1)))))
View(PredictorData2017_edit)
#Generate returns
PredictorData2017_edit <- cbind(PredictorData2017_edit,
View(PredictorData2017_edit)
PredictorData2017_edit <- PredictorData2017 %>%
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
PredictorData2017_edit <- cbind(PredictorData2017_edit,
(log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1)))
)
View(PredictorData2017_edit)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
View(PredictorData2017_edit)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp)
View(PredictorData2017_edit)
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ .^2, data = PredictorData2017_edit)
View(pair_model)
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ .^2)
summary(PredictorData2017_edit)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly",
na = "NaN")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp)
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ .^2, data = PredictorData2017_edit)
View(pair_model)
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ .^2 -yearmon, data = PredictorData2017_edit)
View(pair_model)
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ -yearmon + .^2, data = PredictorData2017_edit)
View(pair_model)
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit[-yearmon])
#Build pairwise interactions
pair_model <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit %>%
select(-yearmon))
View(pair_model)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(zoo)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly",
na = "NaN")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp, -Index)
dataset_yearmon <- PredictorData2017_edit$yearmon
#Build pairwise interactions
PredictorData2017_pair <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit %>%
select(-yearmon))
View(PredictorData2017_pair)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(zoo)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly",
na = "NaN")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp, -Index)
yearmon <- PredictorData2017_edit$yearmon
#Build pairwise interactions
PredictorData2017_pair <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit %>%
select(-yearmon))
yearmon
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(zoo)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly",
na = "NaN")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp, -Index)
yearmon <- PredictorData2017_edit$yearmon
#Build pairwise interactions
PredictorData2017_pair <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit %>%
select(-yearmon))
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 500,
mtry = 3,
write.forest = T)
?ranger
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 500,
mtry = 3,
write.forest = T,
splitrule = "variance")
typeof(PredictorData2017_pair)
PredictorData2017_pair <- as.data.frame(PredictorData2017_pair)
View(PredictorData2017_pair)
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 500,
mtry = 3,
write.forest = T,
splitrule = "variance")
colnames(PredictorData2017_pair)
colnames <- colnames(PredictorData2017_pair)
make.names()
?make.names
make.names(colnames)
knitr::opts_chunk$set(echo = TRUE)
################
##Load Libraries
################
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
library(caret)
library(forecast)
library(rlist)
library(Metrics)
library(ranger)
library(zoo)
set.seed(27935248)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly",
na = "NaN")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp, -Index)
yearmon <- PredictorData2017_edit$yearmon
#Build pairwise interactions
PredictorData2017_pair <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit %>%
select(-yearmon))
PredictorData2017_pair <- as.data.frame(PredictorData2017_pair)
colnames(PredictorData2017_pair) <- make.names(colnames(PredictorData2017_pair))
View(PredictorData2017_pair)
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 500,
mtry = 3,
write.forest = T,
splitrule = "variance")
View(PredictorData2017_pair)
#Import Data
library(readxl)
PredictorData2017 <- read_excel("PredictorData2017.xlsx",
sheet = "Monthly",
na = "NaN")
PredictorData2017_edit <- PredictorData2017 %>%
mutate(yearmon = as.yearmon(as.character(yyyymm), format = "%Y%m")) %>%
select(-yyyymm)
#Generate returns
logreturns <- log(PredictorData2017_edit$Index/ lag(PredictorData2017_edit$Index, 1))
PredictorData2017_edit <- cbind(PredictorData2017_edit, logreturns)
PredictorData2017_edit <- PredictorData2017_edit %>%
filter(yearmon >= as.yearmon(as.character(200001), format = "%Y%m")) %>%
select(-csp, -Index)
yearmon <- PredictorData2017_edit$yearmon
#Build pairwise interactions
PredictorData2017_pair <- model.matrix(logreturns ~ .^2,
data = PredictorData2017_edit %>%
select(-yearmon))
PredictorData2017_pair <- as.data.frame(PredictorData2017_pair)
View(PredictorData2017_pair)
logreturns <- PredictorData2017_edit$logreturns
PredictorData2017_pair <- cbind(logreturns, PredictorData2017_pair)
colnames(PredictorData2017_pair) <- make.names(colnames(PredictorData2017_pair))
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 500,
mtry = 3,
write.forest = T,
splitrule = "variance")
summary(rf)
rf$r.squared
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 1000,
mtry = 3,
write.forest = T,
splitrule = "variance")
rf$importance.mode
rf$r.squared
rf$prediction.error
?ranger
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 1000,
mtry = 3,
write.forest = T,
splitrule = "variance",
importance = "impurity")
rf$variable.importance
plot(rf$variable.importance)
summary(rf$variable.importance)
rf$variable.importance
rf <- ranger(logreturns ~ .,
data = PredictorData2017_pair,
num.trees = 1000,
mtry = 3,
write.forest = T,
splitrule = "variance",
importance = "impurity",
replace = T)
rf$variable.importance
