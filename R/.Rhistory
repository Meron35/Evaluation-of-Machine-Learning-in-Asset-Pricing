?rank
rank(C_hat[[1]])
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
#Simulation
N <- 200
P_c <- 100
#Errors
epsilon <- c(rnorm(N, 0, 1))
w <- c(rnorm(N, 0, 1))
sigma2 <-
elm <- matrix(
data = 0, nrow = N, ncol = P_c
)
Ct <- rep(list(elm), 180)
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- Ct[[t]][i, j]*rho + rnorm(1, 0, 1)
}
}
}
#B and lambda matrix
Lambda <- matrix(
data = rnorm(N*4, 0, 1),
nrow = N, ncol = 4
)
B <- (Lambda)%*%t(Lambda)
B <- B + 1/10*diag(nrow = nrow(B))
#Transform into correlation matrix W
W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)
C_hat <- rep(list(elm), 180)
for (t in 1:180) {
C_hat[[t]] <- W %*% Ct[[t]]
}
#Final proper C
C <- rep(list(elm), 180)
rank(C_hat[[1]])
C_hat[[1]]
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- 2/(N+1)*rank(C_hat[[t]])[i, j] -1
}
}
}
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- matrix(
2/(N+1)*rank(C_hat[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
rank(C_hat[[1]])
elm <- matrix(
data = 0, nrow = N, ncol = P_c
)
C_bar_t <- rep(list(elm), 180)
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
C_bar_t[[t+1]][i, j] <- C_bar_t[[t]][i, j]*rho + rnorm(1, 0, 1)
}
}
}
#B and lambda matrix
Lambda <- matrix(
data = rnorm(N*4, 0, 1),
nrow = N, ncol = 4
)
B <- (Lambda)%*%t(Lambda)
B <- B + 1/10*diag(nrow = nrow(B))
#Transform into correlation matrix W
W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)
C_hat <- rep(list(elm), 180)
for (t in 1:180) {
C_hat[[t]] <- W %*% C_bar_t[[t]]
}
#Final proper C
C <- rep(list(elm), 180)
C_bar_t[[1]]
C_bar_t[[2]]
C_bar_t <- rep(list(elm), 181)
for (t in 1:180) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
C_bar_t[[t+1]][i, j] <- C_bar_t[[t]][i, j]*rho + rnorm(1, 0, 1)
}
}
}
C_bar_t[[1]]
C_bar_t[[1]] <- NULL
C_bar_t[[1]]
for (t in 1:180) {
C_hat[[t]] <- W %*% C_bar_t[[t]]
}
C <- rep(list(elm), 180)
rank(C_bar_t[[1]])
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- matrix(
2/(N+1)*rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
2/(N+1)*matrix(
rank(C_bar_t[[1]]),
nrow = N, ncol = P_c
)[1, 1] - 1
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
C_bar_t <- lapply(C_bar_t,
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
C_bar_t[[t+1]][i, j] <- C_bar_t[i, j]*rho + rnorm(1, 0, 1)
}
}
)
#characteristics C
elm <- matrix(
data = 0, nrow = N, ncol = P_c
)
C_bar_t <- rep(list(elm), 181)
for (t in 1:180) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
C_bar_t[[t+1]][i, j] <- C_bar_t[[t]][i, j]*rho + rnorm(1, 0, 1)
}
}
}
#Remove initial
C_bar_t[[1]] <- NULL
#B and lambda matrix
Lambda <- matrix(
data = rnorm(N*4, 0, 1),
nrow = N, ncol = 4
)
B <- (Lambda)%*%t(Lambda)
B <- B + 1/10*diag(nrow = nrow(B))
#Transform into correlation matrix W
W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)
C_hat <- rep(list(elm), 180)
for (t in 1:180) {
C_hat[[t]] <- W %*% C_bar_t[[t]]
}
#Final proper C
C <- rep(list(elm), 180)
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t+1]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
C <- rep(list(elm), 180)
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(tidyverse)
library(keras)
library(ggplot2)
C <- rep(list(elm), 180)
for (t in 1:179) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
for (t in 1:2) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
for (t in 1:1) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
#characteristics C
elm <- matrix(
data = 0, nrow = N, ncol = P_c
)
C_bar_t <- rep(list(elm), 181)
for (t in 1:180) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
C_bar_t[[t+1]][i, j] <- C_bar_t[[t]][i, j]*rho + rnorm(1, 0, 1)
}
}
}
#Remove initial
C_bar_t[[1]] <- NULL
#B and lambda matrix
Lambda <- matrix(
data = rnorm(N*4, 0, 1),
nrow = N, ncol = 4
)
B <- (Lambda)%*%t(Lambda)
B <- B + 1/10*diag(nrow = nrow(B))
#Transform into correlation matrix W
W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)
C_hat <- rep(list(elm), 180)
for (t in 1:180) {
C_hat[[t]] <- W %*% C_bar_t[[t]]
}
#Final proper C
C <- rep(list(elm), 180)
for (t in 1:1) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
View(Ct)
Ct <- rep(list(elm), 180)
for (t in 1:) {
for (t in 1:180) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]]),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
#Simulation
N <- 200
P_c <- 100
#Errors
epsilon <- c(rnorm(N, 0, 1))
w <- c(rnorm(N, 0, 1))
#sigma2 <-
#characteristics C
elm <- matrix(
data = 0, nrow = N, ncol = P_c
)
C_bar_t <- rep(list(elm), 181)
for (t in 1:180) {
for (j in 1:P_c) {
rho <- runif(1, 1/2, 1)
for (i in 1:N) {
C_bar_t[[t+1]][i, j] <- C_bar_t[[t]][i, j]*rho + rnorm(1, 0, 1)
}
}
}
#Remove initial
C_bar_t[[1]] <- NULL
#B and lambda matrix
Lambda <- matrix(
data = rnorm(N*4, 0, 1),
nrow = N, ncol = 4
)
B <- (Lambda)%*%t(Lambda)
B <- B + 1/10*diag(nrow = nrow(B))
#Transform into correlation matrix W
W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)
C_hat <- rep(list(elm), 180)
for (t in 1:180) {
C_hat[[t]] <- W %*% C_bar_t[[t]]
}
#Final proper C
Ct <- rep(list(elm), 180)
for (t in 1:180) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]], ties.method = "average"),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
Ct[[1]]
Ct <- rep(list(elm), 180)
for (t in 1:2) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*matrix(
rank(C_bar_t[[t]], ties.method = "average"),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
}
Ct[[1]]
Ct[[2]]
Ct <- lapply(C_bar_t,
for (j in 1:P_c) {
for (i in 1:N) {
2/(N+1)*matrix(
rank(C_bar_t, ties.method = "average"),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
)
Ct <- lapply(C_bar_t,
for (j in 1:P_c) {
for (i in 1:N) {
2/(N+1)*matrix(
rank(C_bar_t[[]], ties.method = "average"),
nrow = N, ncol = P_c
)[i, j] - 1
}
}
)
Ct <- rep(list(elm), 180)
for (t in 1:180) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- 2/(N+1)*(
rank(C_bar_t[[t]], ties.method = "average")
)[(i-1)*j + j] - 1
}
}
}
Ct <- rep(list(elm), 180)
for (t in 1:180) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- (
rank(C_bar_t[[t]], ties.method = "average")
)[(i-1)*j + j]
}
}
}
Ct <- rep(list(elm), 180)
for (t in 1:2) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <- (
rank(C_bar_t[[t]], ties.method = "average")
)[(i-1)*j + j]
}
}
}
Ct[[2]]
rank(C_bar_t[[1]]
)
Ct <- rep(list(elm), 180)
for (t in 1:2) {
for (j in 1:P_c) {
for (i in 1:N) {
Ct[[t]][i, j] <-
matrix(rank(C_bar_t[[t]], ties.method = "average"),
nrow = N, ncol = P_c)
}
}
}
for (t in 1:180) {
Ct[[t]] <- matrix(rank(C_bar_t[[t]], ties.method = "average"),
nrow = N, ncol = P_c)
}
View(Ct)
Ct[[3]]
View(Ct)
for (t in 1:180) {
Ct[[t]] <- (2/(N+1))*matrix(rank(C_bar_t[[t]], ties.method = "average"),
nrow = N, ncol = P_c) - matrix(rep(1, N*P_c), nrow = N, ncol = P_c)
}
View(Ct)
#xt
A1 <- matrix(c(
0.95, 0, 0,
0, 0.95, 0,
0, 0, 0.95),
nrow = 3, ncol = 3
)
A2 <- matrix(c(
1, 0, 0.25,
0, 0.95, 0,
0.25, 0, 0.95),
nrow = 3, ncol = 3
)
A3 <- matrix(c(
0.99, 0.2, 0.1,
0.2, 0.90, -0.3,
0.1, -0.3, -0.99),
nrow = 3, ncol = 3
)
xt <- data.frame(x1 = c(0:179),
x2 = c(0:179),
x3 = c(0:179)
)
for (i in 1:179) {
ut <- rnorm(3, mean = 0, sd = 1)
xt[1+i,] <- A1*xt[i,] + ut
}
xt_tidy <- cbind(t = c(1:180), xt)
xt_tidy <- xt_tidy %>%
gather(series, value, -t)
ggplot(data = xt_tidy) +
geom_line(aes(x = t, y = value, colour = series))
#g1
g1 <- function(C, x, i, t){
theta <- matrix(c(0.02, 0.02, 0.02), ncol = 1)
crossprod(C[[t]][i,1:3], x[t,]) %*% theta
}
g1(Ct, xt, 1, 1)
#g1
g1 <- function(C, x, i, t){
theta <- matrix(c(0.02, 0.02, 0.02), ncol = 1)
C[[t]][i,1:3] %*% x[t,] %*% theta
}
g1(Ct, xt, 1, 1)
xt[t,]
C[[1]][i,1:3]
C[[1]][1,1:3]
Ct[[1]][1,1:3]
#g1
g1 <- function(C, x, i, t){
theta <- matrix(c(0.02, 0.02, 0.02), ncol = 1)
C[[t]][i,1:3] %*% t(x[t,]) %*% theta
}
g1(Ct, xt, 1, 1)
C[[1]][1,1:3] %*% t(x[1,])
C[[1]][1,1:3] %*% t(xt[1,])
Ct[[1]][1,1:3] %*% t(xt[1,])
#g1
g1 <- function(C, x, i, t){
theta <- matrix(c(0.02, 0.02, 0.02), ncol = 1)
matrix(C[[t]][i,1], C[[t]][i,2], C[[t]][i,3] %*% t(x[t,]), nrow = 1) %*% theta
}
g1(Ct, xt, 1, 1)
?crossprod
crossprod(Ct[[1]][1,3], t(x[1,]))
crossprod(Ct[[1]][1,3], t(xt[1,]))
