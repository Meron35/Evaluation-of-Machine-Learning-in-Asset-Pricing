"0","###################"
"0","##characteristics C_bar"
"0","###################"
"0","#######"
"0","##Function to Generate C_bar"
"0","#######"
"0","gen_C_bar <- function(){"
"0","  "
"0","  #Create some dimnames"
"0","  #provideDimnames doesn't do exactly what I want it to"
"0","  #Just do it manually via paste0"
"0","  "
"0","  stock_dim <- paste0(""stock_"", c(1:N))"
"0","  c_dim <- paste0(""c_"", c(1:P_c))"
"0","  time_dim <- paste0(""time_"", c(0:(Time+1)))"
"0","  "
"0","  #Initialize am empty array with i, j, t indexing"
"0","  "
"0","  C_bar <- array(data = 0, dim = c(N, P_c, (Time+2)), dimnames = list(stock_dim, c_dim, time_dim))"
"0","  "
"0","  #Generate rho vector to be constant across time and stocks"
"0","  #Original rho vector in draft proposal"
"0","  #rho <- runif(P_c, 1/2, 1)"
"0","  "
"0","  #Lower rho values here will give higher time series correlation, and lower cross sectional r squared. New rho is just 0.5 across all stocks and all times."
"0","  "
"0","  rho <- rep(0.5, P_c)"
"0","  "
"0","  for (t in 1:(Time+1)) {"
"0","    for (j in 1:P_c) {"
"0","      C_bar[, j, t+1] <- C_bar[, j, t] * rho[j] + rnorm(N, 0, 1)"
"0","    }"
"0","  }"
"0","  "
"0","  ##Delete first period full of zeroes"
"0","  C_bar <- C_bar[, , -1]"
"0","  "
"0","  return(C_bar)"
"0","}"
"0","#######################################"
"0","##Generate correlation matrix"
"0","#######################################"
"0","gen_W <- function(){"
"0","  "
"0","  #Generate Lambda Matrix first"
"0","  "
"0","  Lambda <- matrix("
"0","    data = rnorm(N*4, 0, 1),"
"0","    nrow = N, ncol = 4"
"0","  )"
"0","  "
"0","  #Use Lambda to create B matrix"
"0","  "
"0","  B <- (Lambda) %*% t(Lambda)"
"0","  B <- B + 1/10*diag(nrow = nrow(B))"
"0","  "
"0","  #Turn B into a correlation matrix"
"0","  "
"0","  W <- diag(B)^(-1/2)*B*diag(B)^(-1/2)"
"0","  return(W)"
"0","}"
"0","#########################"
"0","##Generate C_hat"
"0","#########################"
"0","#This builds in the correlation from W into original C_bar"
"0","#This already calls gen_W and does everything for you, but you need to specify a C_bar"
"0","gen_C_hat <- function(C_bar){"
"0","  W <- gen_W()"
"0","  "
"0","  stock_dim <- paste0(""stock_"", c(1:N))"
"0","  c_dim <- paste0(""c_"", c(1:P_c))"
"0","  time_dim <- paste0(""time_"", c(1:(Time+1)))"
"0","  "
"0","  C_hat <- array(data = 0, dim = c(N, P_c, Time+1), dimnames = list(stock_dim, c_dim, time_dim))"
"0","  for (t in 1:(Time+1)) {"
"0","    C_hat[, , t] <- W %*% C_bar[, , t]"
"0","  }"
"0","  "
"0","  return(C_hat)"
"0","}"
"0","##################################"
"0","##Generate final ""observed"" C"
"0","##################################"
"0","#This function ""observes"" characteristics by normalizing them within (-1, 1) via the rank transformation"
"0","#Takes any sort of C matrix and normalizes them via rank trasnformation"
"0","gen_C <- function(C_matrix){"
"0","  "
"0","  stock_dim <- paste0(""stock_"", c(1:N))"
"0","  c_dim <- paste0(""c_"", c(1:P_c))"
"0","  time_dim <- paste0(""time_"", c(1:(Time+1)))"
"0","  "
"0","  C <- array(data = 0, dim = c(N, P_c, Time+1), dimnames = list(stock_dim, c_dim, time_dim))"
"0","  "
"0","  for (t in 1:(Time+1)) {"
"0","    C[, , t] <- (2/(N*P_c+1))*"
"0","      rank(C_matrix[, , t]) - matrix("
"0","        data = 1, nrow = N, ncol = P_c"
"0","        )"
"0","  }"
"0","  return(C)"
"0","}"
