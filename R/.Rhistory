variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = NULL),
distribution.model = "std")
AR1_GARCH_1_1_t_model <- ugarchfit(spec = ugarch_spec,
data = stock_1$rt,
solver.control = list(trace=0))
show(AR1_GARCH_1_1_t_model)
library(tsfeatures)
install.packages("tsfeatures")
library(tfeatures)
library(tsfeatures)
devtools::install_github("robjhyndman/M4metalearning")
install_github("robjhyndman/M4metalearning")
tsfeatures(stock_1$rt,
features = c("acf"))
## THA_features function from Meta4learning dev package
THA_features <-
function(dataset, n.cores=1) {
list_process_fun <- lapply
cl = -1
require(tsfeatures)
if (n.cores > 1) {
cl <- parallel::makeCluster(n.cores)
#parallel::clusterExport(cl, varlist="dataset", envir=environment())
parallel::clusterExport(cl, varlist=ls(), envir=environment())
parallel::clusterExport(cl, varlist=ls(envir=environment(THA_features)),
envir = environment(THA_features))
parallel::clusterCall(cl, function() library(tsfeatures)) #required to find functions within tsfeatures
list_process_fun <- function(my_list, ...) {
parallel::parLapplyLB(cl, my_list, ...)
}
}
dataset_feat <- list_process_fun(dataset,
function (serdat) {
tryCatch({
#additional features from Talagala, Hyndman, Athanasopoulos 2018
featrow <-
tsfeatures::tsfeatures(
serdat$x,
features = c(
"acf_features",
"arch_stat",
"crossing_points",
"entropy",
"flat_spots",
"heterogeneity_tsfeat_workaround",
"holt_parameters",
"hurst",
"lumpiness",
"nonlinearity",
"pacf_features",
"stl_features",
"stability",
"hw_parameters_tsfeat_workaround",
"unitroot_kpss",
"unitroot_pp"
)
)
#additional features
series_length <- length(serdat$x)
featrow <- tibble::add_column(
featrow,
"series_length" = series_length)
featrow[is.na(featrow)] <-
0 #SET NAs TO 0 ?
#adding dummy variables for non seasonal series
#that are not output by tsfeatures
if (length(featrow) == 37) {
featrow <- tibble::add_column(featrow, "seas_acf1" = 0, .before = 7)
featrow <- tibble::add_column(featrow, "seas_pacf" =
0, .before = 24)
featrow = tibble::add_column(
featrow,
"seasonal_strength" = 0,
"peak" = 0,
"trough" = 0,
.before=33)
}
serdat$features <- featrow
serdat
}, error = function(e) {
print(e)
return(e)
})
})
if (n.cores > 1) {
parallel::stopCluster(cl)
}
dataset_feat
}
THA_features(stock$rt)
THA_features(stock_1$rt)
## THA_features function from Meta4learning dev package
THA_features <-
function(dataset, n.cores=1) {
list_process_fun <- lapply
cl = -1
require(tsfeatures)
if (n.cores > 1) {
cl <- parallel::makeCluster(n.cores)
#parallel::clusterExport(cl, varlist="dataset", envir=environment())
parallel::clusterExport(cl, varlist=ls(), envir=environment())
parallel::clusterExport(cl, varlist=ls(envir=environment(THA_features)),
envir = environment(THA_features))
parallel::clusterCall(cl, function() library(tsfeatures)) #required to find functions within tsfeatures
list_process_fun <- function(my_list, ...) {
parallel::parLapplyLB(cl, my_list, ...)
}
}
dataset_feat <- list_process_fun(dataset,
function (serdat) {
tryCatch({
#additional features from Talagala, Hyndman, Athanasopoulos 2018
featrow <-
tsfeatures::tsfeatures(
serdat,
features = c(
"acf_features",
"arch_stat",
"crossing_points",
"entropy",
"flat_spots",
"heterogeneity_tsfeat_workaround",
"holt_parameters",
"hurst",
"lumpiness",
"nonlinearity",
"pacf_features",
"stl_features",
"stability",
"hw_parameters_tsfeat_workaround",
"unitroot_kpss",
"unitroot_pp"
)
)
#additional features
series_length <- length(serdat$x)
featrow <- tibble::add_column(
featrow,
"series_length" = series_length)
featrow[is.na(featrow)] <-
0 #SET NAs TO 0 ?
#adding dummy variables for non seasonal series
#that are not output by tsfeatures
if (length(featrow) == 37) {
featrow <- tibble::add_column(featrow, "seas_acf1" = 0, .before = 7)
featrow <- tibble::add_column(featrow, "seas_pacf" =
0, .before = 24)
featrow = tibble::add_column(
featrow,
"seasonal_strength" = 0,
"peak" = 0,
"trough" = 0,
.before=33)
}
serdat$features <- featrow
serdat
}, error = function(e) {
print(e)
return(e)
})
})
if (n.cores > 1) {
parallel::stopCluster(cl)
}
dataset_feat
}
THA_features(stock_1$rt)
heterogeneity_tsfeat_workaround <- function(x) {
output <- c(arch_acf =0, garch_acf=0, arch_r2=0, garch_r2=0)
try( output <- tsfeatures::heterogeneity(x) )
output
}
#' @export
hw_parameters_tsfeat_workaround <- function(x) {
hw_fit <- NULL
hw_fit$par <- c(NA, NA, NA)
try(hw_fit <- forecast::ets(x, model=c("AAA")), silent=TRUE)
names(hw_fit$par) <- c("hw_alpha", "hw_beta" , "hw_gamma")
hw_fit$par[1:3]
}
THA_features(stock_1$rt)
THA_features(as.ts(stock_1$rt))
tsfeatures(stock_1$rt,
features = c("acf_features",
"arch_stat",
"crossing_points",
"entropy",
"flat_spots",
"heterogeneity_tsfeat_workaround",
"holt_parameters",
"hurst",
"lumpiness",
"nonlinearity",
"pacf_features",
"stl_features",
"stability",
"hw_parameters_tsfeat_workaround",
"unitroot_kpss",
"unitroot_pp"))
install.packages("devtools")
library(tsfeatures)
?stl_features
stl_features(AirPassengers)
stl_features()
stl_features
install.packages("tsne")
library(tsne)
library(speedglm)
library(tidyverse)
library(keras)
library(ggplot2)
library(forecast)
library(rlist)
library(Metrics)
library(tensorflow)
library(quantreg)
library(randomForestSRC)
library(hqreg)
library(caret)
library(tsfeatures)
## Vector arima/garch packages
library(tsne)
library(rmgarch)
library(marima)
g1_A1_sv_0.1 <- readRDS("~/GitHub/Evaluation-of-Machine-Learning-in-Asset-Pricing/R/Simulated_dataset/g1_A1_sv_0.1.RDS")
pooled_panel <- g1_A1_sv_0.1[[1]]$panel
pooled_panel %>%
filter(stock == "stock_1") %>%
xts()
library(xts)
pooled_panel %>%
filter(stock == "stock_1") %>%
xts()
stock_1 <- pooled_panel %>%
filter(stock == "stock_1")
# Using all available factors for a single garch fit is not possible - no. of factors > no. of observations
stock_1_xts <- as.xts(stock_1[,-(1:3)], order.by = as.Date(stock_1$time))
View(stock_1_xts)
View(stock_1)
?tsne
tsne(stock_1[, -(1:3)])
stock_1_tsne <- tsne(stock_1[, -(1:3)])
View(stock_1_tsne)
View(stock_1_tsne)
ggplot(data = stock_1_tsne) %>%
geom_point(aes(x = V1, y = V2))
stock_1_tsne $>$ as.data.frame() %>%
stock_1_tsne %>% as.data.frame() %>%
ggplot() %>%
geom_point(aes(x = V1, y = V2))
stock_1_tsne %>% as.data.frame() %>%
ggplot() +
geom_point(aes(x = V1, y = V2))
stock_1_tsne %>% as.data.frame() %>%
ggplot() +
geom_point(aes(x = V1, y = V2))
stock_2 <- pooled_panel %>%
filter(stock == "stock_2")
stock_2_tsne <- tsne(stock_1[, -(1:3)])
stock_2_tsne %>% as.data.frame() %>%
ggplot() +
geom_point(aes(x = V1, y = V2))
stock_1_tsne %>% as.data.frame() %>%
ggplot() +
geom_point(aes(x = V1, y = V2))
stock_2_tsne %>% as.data.frame() %>%
ggplot() +
geom_point(aes(x = V1, y = V2))
stock_1_xts <- cbind(stock_1$rt, stock_1_tsne)
View(stock_1_xts)
stock_1_xts <- data.frame(rt = stock_1$rt, stock_1_tsne)
View(stock_1_xts)
stock_1_xts <- data.frame(rt = stock_1$rt, time = stock_1$time, stock_1_tsne) %>%
as.xts(order.by = as.Date(time))
stock_1_xts <- data.frame(rt = stock_1$rt, time = stock_1$time, stock_1_tsne)
View(stock_1_xts)
stock_1_xts <- data.frame(rt = stock_1$rt, stock_1_tsne)
stock_1_xts <- as.xts(stock_1_xts, order.by = as.Date(stock_1$time))
View(stock_1_xts)
ugarch_spec <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = stock_1_xts[, -1],
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = stock_1_xts[, -1]),
distribution.model = "std")
AR1_GARCH_1_1_t_model <- ugarchfit(spec = ugarch_spec,
data = stock_1$rt,
solver.control = list(trace=0))
show(AR1_GARCH_1_1_t_model)
stock_id <- unique(pooled_panel$stock)
stock_id <- unique(pooled_panel$stock)
stock_series_tsne <- foreach(i = (1:length(stock_id)), .combine = "rbind") %do% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)])
stock_series_tsne <- as.data.frame(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
#Parallel Computing
library(foreach)
stock_series_tsne <- foreach(i = (1:length(stock_id)), .combine = "rbind") %do% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)])
stock_series_tsne <- as.data.frame(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
library(doFuture)
#Registering
registerDoFuture()
plan(multisession)
stock_id <- unique(pooled_panel$stock)
stock_series_tsne <- foreach(i = (1:length(stock_id)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)])
stock_series_tsne <- as.data.frame(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
View(stock_series_tsne)
stock_series_tsne <- foreach(i = (1:length(stock_id)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)])
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
View(stock_series_tsne)
stock_series_tsne <- as.dataframe(stock_series_tsne)
stock_series_tsne <- as.data.frame(stock_series_tsne)
View(stock_series_tsne)
stock_series_tsne %>%
ggplot() +
geom_point(aes(x = V1, y = V2, colour = stock))
View(stock_series_tsne)
stock_series_tsne %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock))
stock_series_tsne %>%
ggplot() +
geom_point(aes(x = V2, y = V3, fill = stock))
stock_series_tsne %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, fill = stock))
stock_series_tsne %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, fill = stock)) +
theme(legend.position = "none")
stock_series_tsne %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
?normalize
stock_series_tsne %>%
normalize(V2) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
normalize(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
stock_series_tsne <- foreach(i = (1:(length(stock_id)/10)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)])
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- as.data.frame(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
stock_id <- unique(pooled_panel$stock)
stock_series_tsne <- foreach(i = (1:(length(stock_id)/20)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)])
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- as.data.frame(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
?tsne
stock_series_tsne <- foreach(i = (1:(length(stock_id)/1)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)], perplexity = 50)
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- foreach(i = (1:(length(stock_id)/1)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)], perplexity = 50)
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- as.data.frame(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
stock_series_tsne <- foreach(i = (1:(length(stock_id)/20)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)], perplexity = 50)
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- foreach(i = (1:(length(stock_id)/20)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)], perplexity = 50)
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- as.data.frame(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
stock_series_tsne <- foreach(i = (1:(length(stock_id)/40)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)], perplexity = 50)
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- as.data.frame(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
stock_series_tsne <- foreach(i = (1:(length(stock_id)/40)), .combine = "rbind") %dopar% {
stock_series <- pooled_panel %>%
filter(stock == stock_id[i])
# Apply tsne
stock_series_tsne <- tsne(stock_series[, -(1:3)], perplexity = 100)
stock_series_tsne <- cbind(stock = stock_id[i], stock_series_tsne)
stock_series_tsne
}
stock_series_tsne <- as.data.frame(stock_series_tsne)
stock_series_tsne %>%
mutate(V2 = (V2 - mean(V2))/sd(V2)) %>%
mutate(V3 = (V3 - mean(V3))/sd(V3)) %>%
mutate(stock = as.factor(stock)) %>%
ggplot() +
geom_point(aes(x = V2, y = V3, colour = stock)) +
theme(legend.position = "none")
?prcomp
stock_1_pca <- prcomp(stock_1[, -1:3])
stock_1_pca <- prcomp(stock_1[, -(1:3)])
View(stock_1_pca)
View(stock_1)
summary(stock_1_pca)
biplot(stock_1_pca)
screeplot(stock_1_pca)
summary(stock_1_pca)
pooled_panel_pca <- prcomp(pooled_panel[, -(1:3)])
summary(pooled_panel_pca)
screeplot(pooled_panel_pca)
summary(pooled_panel_pca)
stock_1_pca <- prcomp(stock_1[, -(1:3)], center = TRUE, scale. = TRUE)
summary(stock_1_pca)
pooled_panel_pca <- prcomp(pooled_panel[, -(1:3)], center = TRUE, scale. = TRUE)
summary(pooled_panel_pca)
screeplot(pooled_panel_pca)
