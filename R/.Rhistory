test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
test_x <- test[4:ncol(test)]
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(rf_model, newdata = test_x)$predicted, test$rt, form = "traditional")
new_R2 <- R2(predict(rf_model, newdata = test_x_zero)$predicted, test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(rf_model, newdata = test_x)$predicted, test$rt, form = "traditional")
new_R2 <- R2(predict(rf_model, newdata = test_x_zero)$predicted, test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2)
)
)
}
return(variable_importance)
}
# Neural Network
NNet_variable_importance <- function(test, timeSlices, nnet_model) {
test_x <- test[4:ncol(test)]
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(nnet_model, as.matrix(test_x)), test$rt, form = "traditional")
new_R2 <- R2(predict(nnet_model, as.matrix(test_x_zero)), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(nnet_model, as.matrix(test_x)), test$rt, form = "traditional")
new_R2 <- R2(predict(nnet_model, as.matrix(test_x_zero)), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2)
)
)
}
return(variable_importance)
}
LM_fit <- function(pooled_panel, timeSlices, loss_function) {
#Initialize Loss Function Statistics
LM_stats <- rep(list(0), 3)
for (set in 1:3) {
LM_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
forecasts = 0,
forecast_resids = 0,
model = 0,
#Variable Importance
variable_importance = 0)
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
#Train Model on training set
#MSE case
if (loss_function == "mse") {
lm <- lm(f, data = train)
} else {
# Use pfn as method here for much faster computation
lm <- rq(f, data = train, tau = 0.5, method = "pfn")
}
LM_stats[[set]]$model <- lm
#No Tuning Needed
#Statistics
#Training Set
train_predict <- predict(lm)
LM_stats[[set]]$loss_stats$train_MAE <- mae(train$rt, train_predict)
LM_stats[[set]]$loss_stats$train_MSE <- mse(train$rt, train_predict)
LM_stats[[set]]$loss_stats$train_RMSE <- rmse(train$rt, train_predict)
LM_stats[[set]]$loss_stats$train_RSquare <- (1 - sse(train$rt, train_predict) / sum((train$rt - mean(train$rt))^2))
#Validation Set Statistics
validation_predict <- predict(lm, newdata = validation)
LM_stats[[set]]$loss_stats$validation_MAE <- mae(validation$rt, validation_predict)
LM_stats[[set]]$loss_stats$validation_MSE <- mse(validation$rt, validation_predict)
LM_stats[[set]]$loss_stats$validation_RMSE <- rmse(validation$rt, validation_predict)
LM_stats[[set]]$loss_stats$validation_RSquare <- (1 - sse(validation$rt, validation_predict) / sum((validation$rt - mean(validation$rt))^2))
#Test Set Statistics
test_predict <- predict(lm, newdata = test)
LM_stats[[set]]$loss_stats$test_MAE <- mae(test$rt, test_predict)
LM_stats[[set]]$loss_stats$test_MSE <- mse(test$rt, test_predict)
LM_stats[[set]]$loss_stats$test_RMSE <- rmse(test$rt, test_predict)
LM_stats[[set]]$loss_stats$test_RSquare <- (1 - sse(test$rt, test_predict) / sum((test$rt - mean(test$rt))^2))
#Forecasts
LM_stats[[set]]$forecasts <- test_predict
#Forecast Residuals
LM_stats[[set]]$forecast_resids <- test$rt - test_predict
#Variable Importance
LM_stats[[set]]$variable_importance <- LM_variable_importance(test, timeSlices, lm)
}
return(LM_stats)
}
LM_stats_mse <- LM_fit(pooled_panel, timeSlices, "mse")
LM_stats_mse[[1]]$variable_importance
ELN_fit_stats <- function(alpha_grid, nlamb, timeSlices, pooled_panel, loss_function) {
ELN_stats <- rep(list(0), 3)
for (set in 1:3) {
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
train_x <- as.matrix(train[4:ncol(train)])
train_y <- as.matrix(train$rt)
validation_x <- as.matrix(validation[4:ncol(validation)])
validation_y <- as.matrix(validation$rt)
test_x <- as.matrix(test[4:ncol(test)])
test_y <- as.matrix(test$rt)
#Get models fit over the grid of hyperparameters
ELN_model_grid <- ELN_model_grid(alpha_grid, train_x, train_y, validation_x, validation_y, loss_function, nlamb = nlamb)
#Get the best tuning parameters
best_model_params <- get_ELN_best_tune(ELN_model_grid)
#Initialize stats list
ELN_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
forecasts = 0,
forecast_resids = 0,
model = 0,
hyperparameters = 0,
variable_importance = 0)
#Model
model <- ELN_model_grid[[best_model_params$list_index]]$model
ELN_stats[[set]]$model <- model
#Hyperparameters
ELN_stats[[set]]$hyperparameters <- best_model_params
#Loss Stats Dataframe
#Train
train_predict <- predict(model, train_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$train_MAE <- mae(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_MSE <- mse(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_RMSE <- rmse(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_RSquare <- (1 - sse(train_y, train_predict) / sum((train_y - mean(train_y))^2))
#Validation
valid_predict <- predict(model, validation_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$validation_MAE <- mae(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_MSE <- mse(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_RMSE <- rmse(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_RSquare <- (1 - sse(validation_y, valid_predict) / sum((validation_y - mean(validation_y))^2))
#Test
test_predict <- predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$test_MAE <- mae(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_MSE <- mse(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_RMSE <- rmse(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_RSquare <- (1 - sse(test_y, test_predict) / sum((test_y - mean(test_y))^2))
#Forecasts
ELN_stats[[set]]$forecasts <- predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
#Forecast residuals
ELN_stats[[set]]$forecast_resids <- test_y - predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
#Variable Importance
ELN_stats[[set]]$variable_importance <- ELN_variable_importance(test, timeSlices, model, lambda = best_model_params$lambda)
}
return(ELN_stats)
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
alpha_grid <- seq(0, 1, 0.01)
ELN_model_grid <- function(alpha_grid, train_x, train_y, validation_x, validation_y, loss_function, nlamb) {
#Initialize List
ELN_model_grid <- rep(list(0), length(alpha_grid))
for (i in 1:(length(alpha_grid))) {
ELN_model_grid[[i]] <- list(ELN_grid = 0, model = 0)
#MSE Case
if (loss_function == "mse") {
ELN <- hqreg_raw(train_x, train_y, method = "ls", alpha = alpha_grid[i], nlambda = nlamb)
ELN_model_grid[[i]]$model <- ELN
ELN_model_grid[[i]]$ELN_grid <- cbind(alpha = alpha_grid[i], lambda = ELN$lambda,
train_loss = apply(predict(ELN, train_x), 2, mse, actual = train_y),
validation_loss = apply(predict(ELN, validation_x), 2, mse, actual = validation_y))
} else {
#MAE Case
ELN <- hqreg_raw(train_x, train_y, method = "quantile", tau = 0.5, alpha = alpha_grid[i], nlambda = nlamb)
ELN_model_grid[[i]]$model <- ELN
ELN_model_grid[[i]]$ELN_grid <- cbind(alpha = alpha_grid[i], lambda = ELN$lambda,
train_loss = apply(predict(ELN, train_x), 2, mse, actual = train_y),
validation_loss = apply(predict(ELN, validation_x), 2, mae, actual = validation_y))
}
}
return(ELN_model_grid)
}
get_ELN_best_tune <- function(model_grid) {
ELN_tune_dataframe <- cbind(model_grid[[1]]$ELN_grid, list_index = 1)
for (i in 2:length(model_grid)) {
ELN_tune_dataframe <- rbind(ELN_tune_dataframe, cbind(model_grid[[i]]$ELN_grid, list_index = i))
}
ELN_tune_dataframe <- data.frame(ELN_tune_dataframe)
return(ELN_tune_dataframe[which.min(ELN_tune_dataframe$validation_loss), ])
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
ELN_variable_importance <- function(test, timeSlices, eln_model, lambda) {
test_x <- test[4:ncol(test)]
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(eln_model, newdata = test_x, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, newdata = test_x_zero, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, newdata = test_x, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, newdata = test_x_zero, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2), test$rt, form = "traditional")                                 )
}
return(variable_importance)
}
ELN_fit_stats <- function(alpha_grid, nlamb, timeSlices, pooled_panel, loss_function) {
ELN_stats <- rep(list(0), 3)
for (set in 1:3) {
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
train_x <- as.matrix(train[4:ncol(train)])
train_y <- as.matrix(train$rt)
validation_x <- as.matrix(validation[4:ncol(validation)])
validation_y <- as.matrix(validation$rt)
test_x <- as.matrix(test[4:ncol(test)])
test_y <- as.matrix(test$rt)
#Get models fit over the grid of hyperparameters
ELN_model_grid <- ELN_model_grid(alpha_grid, train_x, train_y, validation_x, validation_y, loss_function, nlamb = nlamb)
#Get the best tuning parameters
best_model_params <- get_ELN_best_tune(ELN_model_grid)
#Initialize stats list
ELN_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
forecasts = 0,
forecast_resids = 0,
model = 0,
hyperparameters = 0,
variable_importance = 0)
#Model
model <- ELN_model_grid[[best_model_params$list_index]]$model
ELN_stats[[set]]$model <- model
#Hyperparameters
ELN_stats[[set]]$hyperparameters <- best_model_params
#Loss Stats Dataframe
#Train
train_predict <- predict(model, train_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$train_MAE <- mae(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_MSE <- mse(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_RMSE <- rmse(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_RSquare <- (1 - sse(train_y, train_predict) / sum((train_y - mean(train_y))^2))
#Validation
valid_predict <- predict(model, validation_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$validation_MAE <- mae(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_MSE <- mse(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_RMSE <- rmse(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_RSquare <- (1 - sse(validation_y, valid_predict) / sum((validation_y - mean(validation_y))^2))
#Test
test_predict <- predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$test_MAE <- mae(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_MSE <- mse(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_RMSE <- rmse(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_RSquare <- (1 - sse(test_y, test_predict) / sum((test_y - mean(test_y))^2))
#Forecasts
ELN_stats[[set]]$forecasts <- predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
#Forecast residuals
ELN_stats[[set]]$forecast_resids <- test_y - predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
#Variable Importance
ELN_stats[[set]]$variable_importance <- ELN_variable_importance(test, timeSlices, model, lambda = best_model_params$lambda)
}
return(ELN_stats)
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
ELN_variable_importance <- function(test, timeSlices, eln_model, alpha, lambda) {
test_x <- test[4:ncol(test)]
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2), test$rt, form = "traditional")                                 )
}
return(variable_importance)
}
ELN_variable_importance <- function(test_x, timeSlices, eln_model, alpha, lambda) {
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2), test$rt, form = "traditional")                                 )
}
return(variable_importance)
}
ELN_variable_importance <- function(test_x, timeSlices, eln_model, alpha, lambda) {
test_x <- test[4:ncol(test)]
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2), test$rt, form = "traditional")                                 )
}
return(variable_importance)
}
ELN_fit_stats <- function(alpha_grid, nlamb, timeSlices, pooled_panel, loss_function) {
ELN_stats <- rep(list(0), 3)
for (set in 1:3) {
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
train_x <- as.matrix(train[4:ncol(train)])
train_y <- as.matrix(train$rt)
validation_x <- as.matrix(validation[4:ncol(validation)])
validation_y <- as.matrix(validation$rt)
test_x <- as.matrix(test[4:ncol(test)])
test_y <- as.matrix(test$rt)
#Get models fit over the grid of hyperparameters
ELN_model_grid <- ELN_model_grid(alpha_grid, train_x, train_y, validation_x, validation_y, loss_function, nlamb = nlamb)
#Get the best tuning parameters
best_model_params <- get_ELN_best_tune(ELN_model_grid)
#Initialize stats list
ELN_stats[[set]] <- list(loss_stats = data.frame(train_MAE = 0, train_MSE = 0, train_RMSE = 0, train_RSquare = 0,
validation_MAE = 0, validation_MSE = 0, validation_RMSE = 0, validation_RSquare = 0,
test_MAE = 0, test_MSE = 0, test_RMSE = 0, test_RSquare = 0),
#Other useful things
forecasts = 0,
forecast_resids = 0,
model = 0,
hyperparameters = 0,
variable_importance = 0)
#Model
model <- ELN_model_grid[[best_model_params$list_index]]$model
ELN_stats[[set]]$model <- model
#Hyperparameters
ELN_stats[[set]]$hyperparameters <- best_model_params
#Loss Stats Dataframe
#Train
train_predict <- predict(model, train_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$train_MAE <- mae(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_MSE <- mse(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_RMSE <- rmse(train_y, train_predict)
ELN_stats[[set]]$loss_stats$train_RSquare <- (1 - sse(train_y, train_predict) / sum((train_y - mean(train_y))^2))
#Validation
valid_predict <- predict(model, validation_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$validation_MAE <- mae(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_MSE <- mse(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_RMSE <- rmse(validation_y, valid_predict)
ELN_stats[[set]]$loss_stats$validation_RSquare <- (1 - sse(validation_y, valid_predict) / sum((validation_y - mean(validation_y))^2))
#Test
test_predict <- predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
ELN_stats[[set]]$loss_stats$test_MAE <- mae(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_MSE <- mse(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_RMSE <- rmse(test_y, test_predict)
ELN_stats[[set]]$loss_stats$test_RSquare <- (1 - sse(test_y, test_predict) / sum((test_y - mean(test_y))^2))
#Forecasts
ELN_stats[[set]]$forecasts <- predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
#Forecast residuals
ELN_stats[[set]]$forecast_resids <- test_y - predict(model, test_x, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
#Variable Importance
ELN_stats[[set]]$variable_importance <- ELN_variable_importance(test, timeSlices, model, alpha = best_model_params$alpha, lambda = best_model_params$lambda)
}
return(ELN_stats)
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
ELN_variable_importance <- function(test, timeSlices, eln_model, alpha, lambda) {
test_x <- test[4:ncol(test)]
test_x_zero <- test_x
test_x_zero[1] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2), test$rt, form = "traditional")                                 )
}
return(variable_importance)
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
ELN_variable_importance <- function(test, timeSlices, eln_model, alpha, lambda) {
test_x <- as.matrix(test[4:ncol(test)])
test_x_zero <- test_x
test_x_zero[1] <- 0
text_x_zero <- as.matrix(test_x_zero)
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2), test$rt, form = "traditional")                                 )
}
return(variable_importance)
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
set <- 1
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
test_x <- as.matrix(test[4:ncol(test)])
test_x_zero <- test_x
test_x_zero[1] <- 0
text_x_zero <- as.matrix(test_x_zero)
colnames(test_x)
colnames(test_x)[1]
ELN_variable_importance <- function(test, timeSlices, eln_model, alpha, lambda) {
test_x <- as.matrix(test[4:ncol(test)])
test_x_zero <- test_x
test_x_zero[1] <- 0
text_x_zero <- as.matrix(test_x_zero)
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- data.frame(variable = colnames(test_x)[1], importance = (original_R2 - new_R2))
for (i in 2:ncol(test_x)) {
test_x_zero <- test_x
test_x_zero[i] <- 0
original_R2 <- R2(predict(eln_model, test_x, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
new_R2 <- R2(predict(eln_model, test_x_zero, alpha = alpha, lambda = lambda), test$rt, form = "traditional")
variable_importance <- rbind(variable_importance,
data.frame(variable = colnames(test_x)[i],
importance = (original_R2 - new_R2))
)
}
return(variable_importance)
}
ELN_stats_mse <- ELN_fit_stats(alpha_grid, nlamb = 100, timeSlices, pooled_panel, loss_function = "mse")
ELN_stats_mse[[1]]$variable_importance
ELN_stats_mse[[1]]$loss_stats
ELN_stats_mse[[1]]$model$alpha
ELN_stats_mse[[2]]$loss_stats
ELN_stats_mse[[2]]$model$alpha
ELN_stats_mse[[2]]$loss_stats
ELN_stats_mse[[3]]$loss_stats
ELN_stats_mse[[3]]$model$alpha
ELN_stats_mse[[1]]$variable_importance %>% arrange(importance)
ELN_stats_mse[[1]]$variable_importance %>% arrange(desc(importance))
ELN_stats_mse[[1]]$variable_importance %>% arrange(desc(importance))
LM_stats_mse[[1]]$variable_importance %>% arrange(desc(importance))
ELN_stats_mse[[1]]$variable_importance %>% arrange(desc(importance))
ELN_stats_mse[[1]]$model
?hqreg
#Load Training, validation and test sets
train <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$train)
validation <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$validation)
test <- pooled_panel %>%
filter(time %in% timeSlices[[set]]$test)
train_x <- as.matrix(train[4:ncol(train)])
train_y <- as.matrix(train$rt)
validation_x <- as.matrix(validation[4:ncol(validation)])
validation_x <- as.matrix(validation[4:ncol(validation)])
validation_y <- as.matrix(validation$rt)
test_x <- as.matrix(test[4:ncol(test)])
test_y <- as.matrix(test$rt)
predict(ELN_stats_mse[[1]]$model, train_x, lambda = ELN_stats_mse[[1]]$model$lambda)
predict(ELN_stats_mse[[1]]$model, train_x, lambda = ELN_stats_mse[[1]]$model$lambda, type = "response")
dim(predict(ELN_stats_mse[[1]]$model, train_x, lambda = ELN_stats_mse[[1]]$model$lambda, type = "response"))
ELN_stats_mse[[1]]$forecast_resids
predict(ELN_stats_mse[[1]]$model, test_x, lambda = ELN_stats_mse[[1]]$model$lambda, type = "response")
predict(ELN_stats_mse[[1]]$model, test_x, lambda = ELN_stats_mse[[1]]$hyperparameters$lambda, type = "response")
