"0","#Tuning Cross Sectional R Squared SKELETON CODE"
"0","#We want inidividual r squared for each stock to be 50%"
"0","#We want inidividual annualized volatility to be 30%"
"0","#We want to cross sectional R squared to be 25%"
"0","#We want the predictive R squared to be 5%"
"0","#Generate paramaters first"
"0","#Tune v_sd for inidividual r square first"
"0","#Gu et al had 0.05 for their v sd"
"0","v_sd <- 0.05"
"0","ep_sd <- 0.05"
"0","#Tune theta for cross sectional r square"
"0","#theta"
"0","theta <- matrix(c(0.02, 0.02, 0.02), nrow = 1)"
"0","resid <- gu_gen_rt_resid(v_sd, ep_sd)"
"0","g <- gu_gen_g(gu_g1)"
"0","rt_cross_tune_panel <- data.frame("
"0","  g = rep(0, N*Time),"
"0","  resid = rep(0, N*Time),"
"0","  time = rep(0, N*Time),"
"0","  stock = rep(0, N*Time)"
"0",")"
"0","for (i in 1:N){"
"0","  rt_cross_tune_df <- data.frame("
"0","    resid = rep(0, Time+1),"
"0","    g = rep(0, Time+1),"
"0","    time = rep(0, Time+1),"
"0","    stock = rep(i, Time+1)"
"0","  )"
"0","  "
"0","  for (t in 1:(Time+1)){"
"0","    rt_cross_tune_df$resid[t] <- resid[[t]][i]"
"0","    rt_cross_tune_df$g[t] <- g[[t]][i]"
"0","    rt_cross_tune_df$time <- t"
"0","  }"
"0","  "
"0","  #Cbind returns, id, time and predictors"
"0","  rt_cross_tune_panel[((i-1)*(Time+1)+1):(i*(Time+1)), ] <- rt_cross_tune_df"
"0","  "
"0","}"
"0","  "
"0","#Remove 1st row because returns data only starts from t = 2"
"0","rt_cross_tune_panel <- rt_cross_tune_panel %>%"
"0","  filter(time != 1) %>%"
"0","  select(-time) %>%"
"0","  mutate(return = resid + g)"
"0","#Individual return R squared"
"0","rt_id_tune_df <- data.frame("
"0","  stock = c(1:N),"
"0","  rsquare = c(1:N)"
"0",")"
"0","for (i in 1:N) {"
"0","  rt_id_tune_panel <- rt_cross_tune_panel %>%"
"0","    filter(stock == i)"
"0","  SSR <- t(rt_id_tune_panel$return - rt_id_tune_panel$g) %*% (rt_id_tune_panel$return - rt_id_tune_panel$g)"
"0","  SST <- t(rt_id_tune_panel$return - mean(rt_id_tune_panel$return)) %*% (rt_id_tune_panel$return - mean(rt_id_tune_panel$return))"
"0","  #SST <- t(rt_id_tune_panel$return) %*% (rt_id_tune_panel$return)"
"0","  rt_id_tune_df$rsquare[i] <- 1 - SSR/SST"
"0","}"
"0","#Sanity check"
"0","summary((rt_id_tune_panel$return - rt_id_tune_panel$g) - rt_id_tune_panel$resid)"
"1","      Min. "
"1","   1st Qu. "
"1","    Median "
"1","      Mean "
"1","   3rd Qu. "
"1","      Max. "
"1","
"
"1","-1.388e-17 "
"1","-1.735e-18 "
"1"," 0.000e+00 "
"1","-3.900e-19 "
"1"," 0.000e+00 "
"1"," 1.214e-17 "
"1","
"
"0","#Makes sure that the right returns, residuals etc are lined up correctly"
"0","#Looks good (not exactly zero due to rounding)"
"0","#Return mean of each individual rsquared"
"0","mean(rt_id_tune_df$rsquare)"
"1","[1]"
"1"," 0.9414787"
"1","
"
"0","#Calculate Annualized Volatility"
"0","#Annualized volatility = calculate volatility (via standard deviation) for the monthly returns, then annualize it by multiplying it by sqrt(12) for 12 months in a year"
"0","vol_tune_df <- data.frame("
"0","  stock = c(1:N),"
"0","  annual_vol = c(1:N)"
"0",")"
"0","for (i in 1:N) {"
"0","  vol_tune_panel <- rt_cross_tune_panel %>%"
"0","    filter(stock == i)"
"0","  vol_tune_df$annual_vol[i] <- sd(vol_tune_panel$return) * sqrt(12)"
"0","}"
"0","#Return the mean annualized volatility"
"0","#Want this aorund 30%"
"0","mean(vol_tune_df$annual_vol)"
"1","[1]"
"1"," 0.2454574"
"1","
"
"0","#Cross sectional r squared"
"0","SSR <- t(rt_cross_tune_panel$resid) %*% (rt_cross_tune_panel$resid)"
"0","SST <- t(rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return)) %*% (rt_cross_tune_panel$return - mean(rt_cross_tune_panel$return))"
"0","#SST <- t(rt_cross_tune_panel$return) %*% (rt_cross_tune_panel$return)"
"0","1 - SSR/SST"
"1","    "
"1","      [,1]"
"1","
[1,]"
"1"," 0.9432597"
"1","
"
"0","#This is quite off from Gu et al's specification and results. NOT GOOD"
