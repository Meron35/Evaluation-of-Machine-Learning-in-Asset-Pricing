hw_fit <- NULL
hw_fit$par <- c(NA, NA, NA)
try(hw_fit <- forecast::ets(x, model=c("AAA")), silent=TRUE)
names(hw_fit$par) <- c("hw_alpha", "hw_beta" , "hw_gamma")
hw_fit$par[1:3]
}
tsfeatures(univariate_time_series,
features = c("acf_features",
"arch_stat",
"crossing_points",
"entropy",
"flat_spots",
"holt_parameters",
"hurst",
"lumpiness",
"nonlinearity",
"pacf_features",
"stl_features",
"stability",
"unitroot_kpss",
"unitroot_pp"))
series_features <- tsfeatures(univariate_time_series,
features = c("acf_features",
"arch_stat",
"crossing_points",
"entropy",
"flat_spots",
"holt_parameters",
"hurst",
"lumpiness",
"nonlinearity",
"pacf_features",
"stl_features",
"stability",
"unitroot_kpss",
"unitroot_pp"))
View(series_features)
tsfeatures(univariate_time_series, features = "acf_features")
tsfeatures(univariate_time_series, features = "stL-features")
tsfeatures(univariate_time_series, features = "stl_features")
tsfeatures(univariate_time_series, features = "stability")
fforma_features <- function(times_series) {
cbind(
# Series length
length = length(time_series),
# nperiods, seasonal_period, trend, seasonality, linearity, curvature, spikiness e_acr1 and e_acf10
tsfeatures(time_series, features = "stl_features"),
# Stability
tsfeatures(time_series, features = "stability"),
# Lumpiness
tsfeatures(time_series, features = "lumpiness"),
# Hurst
tsfeatures(times_series, features = "hurst"),
# Nonlinearity
tsfeatures(times_series, features = "nonlinearity"),
# Holt alpha and beta
tsfeatures(times_series, features = "holt_parameters"),
# HW alpha and beta
tsfeatures(times_series, features = "hw_parameters"),
# Unitroot statistics
tsfeatures(times_series, features = c("unitroot_kpss", "unitroot_pp")),
# ACF features
tsfeatures(times_series, features = "acf_features"),
# PACF features
tsfeatures(times_series, features = "pacf_features"),
# Crossing point
tsfeatures(times_series, features = "crossing_points"),
# flat_spots
tsfeatures(times_series, features = "flat_spots"),
# arch_lm
tsfeatures(times_series, features = "arch_stat"),
# Heterogeneity
tsfeatures(times_series, features = "heterogeneity")
)
}
fforma_features(univariate_time_series)
fforma_features <- function(time_series) {
cbind(
# Series length
length = length(time_series),
# nperiods, seasonal_period, trend, seasonality, linearity, curvature, spikiness e_acr1 and e_acf10
tsfeatures(time_series, features = "stl_features"),
# Stability
tsfeatures(time_series, features = "stability"),
# Lumpiness
tsfeatures(time_series, features = "lumpiness"),
# Hurst
tsfeatures(times_series, features = "hurst"),
# Nonlinearity
tsfeatures(times_series, features = "nonlinearity"),
# Holt alpha and beta
tsfeatures(times_series, features = "holt_parameters"),
# HW alpha and beta
tsfeatures(times_series, features = "hw_parameters"),
# Unitroot statistics
tsfeatures(times_series, features = c("unitroot_kpss", "unitroot_pp")),
# ACF features
tsfeatures(times_series, features = "acf_features"),
# PACF features
tsfeatures(times_series, features = "pacf_features"),
# Crossing point
tsfeatures(times_series, features = "crossing_points"),
# flat_spots
tsfeatures(times_series, features = "flat_spots"),
# arch_lm
tsfeatures(times_series, features = "arch_stat"),
# Heterogeneity
tsfeatures(times_series, features = "heterogeneity")
)
}
fforma_features(univariate_time_series)
fforma_features <- function(time_series) {
cbind(
# Series length
length = length(time_series),
# nperiods, seasonal_period, trend, seasonality, linearity, curvature, spikiness e_acr1 and e_acf10
tsfeatures(time_series, features = "stl_features"),
# Stability
tsfeatures(time_series, features = "stability"),
# Lumpiness
tsfeatures(time_series, features = "lumpiness"),
# Hurst
tsfeatures(time_series, features = "hurst"),
# Nonlinearity
tsfeatures(time_series, features = "nonlinearity"),
# Holt alpha and beta
tsfeatures(time_series, features = "holt_parameters"),
# HW alpha and beta
tsfeatures(time_series, features = "hw_parameters"),
# Unitroot statistics
tsfeatures(time_series, features = c("unitroot_kpss", "unitroot_pp")),
# ACF features
tsfeatures(time_series, features = "acf_features"),
# PACF features
tsfeatures(time_series, features = "pacf_features"),
# Crossing point
tsfeatures(time_series, features = "crossing_points"),
# flat_spots
tsfeatures(time_series, features = "flat_spots"),
# arch_lm
tsfeatures(time_series, features = "arch_stat"),
# Heterogeneity
tsfeatures(time_series, features = "heterogeneity")
)
}
fforma_features(univariate_time_series)
fforma_features(univariate_time_series)
tsfeatures(univariate_time_series, features = "hw_parameters")
fforma_features <- function(time_series) {
cbind(
# Series length
length = length(time_series),
# nperiods, seasonal_period, trend, seasonality, linearity, curvature, spikiness e_acr1 and e_acf10
tsfeatures(time_series, features = "stl_features"),
# Stability
tsfeatures(time_series, features = "stability"),
# Lumpiness
tsfeatures(time_series, features = "lumpiness"),
# Hurst
tsfeatures(time_series, features = "hurst"),
# Nonlinearity
tsfeatures(time_series, features = "nonlinearity"),
# Holt alpha and beta
tsfeatures(time_series, features = "holt_parameters"),
# HW alpha and beta, only applies for seasonal time series
#tsfeatures(time_series, features = "hw_parameters"),
# Unitroot statistics
tsfeatures(time_series, features = c("unitroot_kpss", "unitroot_pp")),
# ACF features
tsfeatures(time_series, features = "acf_features"),
# PACF features
tsfeatures(time_series, features = "pacf_features"),
# Crossing point
tsfeatures(time_series, features = "crossing_points"),
# flat_spots
tsfeatures(time_series, features = "flat_spots"),
# arch_lm
tsfeatures(time_series, features = "arch_stat"),
# Heterogeneity
tsfeatures(time_series, features = "heterogeneity")
)
}
tsfeatures(univariate_time_series, features = "hw_parameters")
fforma_features(univariate_time_series)
tsfeatures(univariate_time_series, features = "stl_features")
stock_id <- unique(pooled_panel$stock)
univariate_time_series <- pooled_panel %>%
filter(stock == stock_id[1]) %>%
filter(time %in% timeSlices[[1]]$train | time %in% timeSlices[[1]]$validation) %>%
select(rt) %>%
ts()
fforma_features <- function(time_series) {
cbind(
# Series length
length = length(time_series),
# nperiods, seasonal_period, trend, seasonality, linearity, curvature, spikiness e_acr1 and e_acf10
tsfeatures(time_series, features = "stl_features"),
# Stability
tsfeatures(time_series, features = "stability"),
# Lumpiness
tsfeatures(time_series, features = "lumpiness"),
# Hurst
tsfeatures(time_series, features = "hurst"),
# Nonlinearity
tsfeatures(time_series, features = "nonlinearity"),
# Holt alpha and beta
tsfeatures(time_series, features = "holt_parameters"),
# HW alpha and beta, only applies for seasonal time series
#tsfeatures(time_series, features = "hw_parameters"),
# Unitroot statistics
tsfeatures(time_series, features = c("unitroot_kpss", "unitroot_pp")),
# ACF features
tsfeatures(time_series, features = "acf_features"),
# PACF features
tsfeatures(time_series, features = "pacf_features"),
# Crossing point
tsfeatures(time_series, features = "crossing_points"),
# flat_spots
tsfeatures(time_series, features = "flat_spots"),
# arch_lm
tsfeatures(time_series, features = "arch_stat"),
# Heterogeneity
tsfeatures(time_series, features = "heterogeneity")
)
}
# Test, works perfectly
fforma_features(univariate_time_series)
univariate_time_series_test <- pooled_panel %>%
filter(stock == stock_id[1]) %>%
filter(time %in% timeSlices[[1]]$test) %>%
select(rt) %>%
ts()
fforma_features <- function(time_series) {
cbind(
# Series length
length = length(time_series),
# nperiods, seasonal_period, trend, seasonality, linearity, curvature, spikiness e_acr1 and e_acf10
tsfeatures(time_series, features = "stl_features"),
# Stability
tsfeatures(time_series, features = "stability"),
# Lumpiness
tsfeatures(time_series, features = "lumpiness"),
# Hurst
tsfeatures(time_series, features = "hurst"),
# Nonlinearity
tsfeatures(time_series, features = "nonlinearity"),
# Holt alpha and beta
tsfeatures(time_series, features = "holt_parameters"),
# HW alpha and beta, only applies for seasonal time series
#tsfeatures(time_series, features = "hw_parameters"),
# Unitroot statistics
tsfeatures(time_series, features = c("unitroot_kpss", "unitroot_pp")),
# ACF features
tsfeatures(time_series, features = "acf_features"),
# PACF features
tsfeatures(time_series, features = "pacf_features"),
# Crossing point
tsfeatures(time_series, features = "crossing_points"),
# flat_spots
tsfeatures(time_series, features = "flat_spots"),
# arch_lm
tsfeatures(time_series, features = "arch_stat"),
# Heterogeneity
tsfeatures(time_series, features = "heterogeneity")
)
}
# Test, works perfectly
fforma_features(univariate_time_series)
```{r}
series_features <- tsfeatures(univariate_time_series,
features = c("acf_features",
"arch_stat",
"crossing_points",
"entropy",
"flat_spots",
"holt_parameters",
"hurst",
"lumpiness",
"nonlinearity",
"pacf_features",
"stl_features",
"stability",
"unitroot_kpss",
"unitroot_pp"))
# Naive
naive_model <- naive(univariate_time_series)
?naive
predict(naive_model)
univariate_time_series_test
View(timeSlices)
# Naive
naive_model <- naive(univariate_time_series, h = 12)
mse(univariate_time_series_test, predict(naive))
predict(naive_model)
?swf
?rwf
test <- predict(naive)
x <- predict(naive)
x <- predict(naive_model)
View(x)
mse(univariate_time_series_test, predict(naive_model))
mse(univariate_time_series_test, predict(naive_model)$fitted)
predict(naive_model)$fitted
mse(univariate_time_series_test, predict(naive_model)$mean)
mse(as.vector(univariate_time_series_test), predict(naive_model)$mean)
mae(as.vector(univariate_time_series_test), predict(naive_model)$mean)
mse(as.vector(univariate_time_series_test), predict(naive_model)$mean)
?naive
# Naive
naive_model <- naive(univariate_time_series, h = 1)
mse(as.vector(univariate_time_series_test), predict(naive_model)$mean)
View(naive_model)
# Naive
naive_model <- naive(univariate_time_series, h = 12)
mse(as.vector(univariate_time_series_test), predict(naive_model)$mean)
mse(as.vector(univariate_time_series_test), predict(random_walk_model)$mean)
# Random walk with drift
random_walk_model <- rwf(univariate_time_series, h = 12, drift = TRUE)
mse(as.vector(univariate_time_series_test), predict(random_walk_model)$mean)
# Seasonal Naive
seasonal_naive_model <- snaive(univariate_time_series, h = 12)
# Seasonal Naive
seasonal_naive_model <- snaive(univariate_time_series, h = 12)
mse(as.vector(univariate_time_series_test), predict(seasonal_naive_model)$mean)
# Theta Method
theta_model <- thetaf(univariate_time_series, h = 12)
mse(as.vector(univariate_time_series_test), predict(theta_model)$mean)
## Auto arima
auto_arima_model <- auto.arima(univariate_time_series, h = 12)
?auto.arima
# Theta Method
theta_model <- thetaf(univariate_time_series)
mse(as.vector(univariate_time_series_test), predict(theta_model, h = 12)$mean)
mse(as.vector(univariate_time_series_test), forecast(theta_model, h = 12)$mean)
## Auto arima
auto_arima_model <- auto.arima(univariate_time_series, h = 12)
mse(as.vector(univariate_time_series_test), predict(auto_arima_model)$mean)
mse(as.vector(univariate_time_series_test), predict(auto_arima_model, h = 12)$mean)
predict(auto_arima_model)
## Auto arima
auto_arima_model <- auto.arima(univariate_time_series)
predict(auto_arima_model)
mse(as.vector(univariate_time_series_test), predict(auto_arima_model, h = 12)$mean)
predict(auto_arima_model, h = 12)
forecast(auto_arima_model, h = 12)
## Auto arima
auto_arima_model <- auto.arima(univariate_time_series)
mse(as.vector(univariate_time_series_test), forecast(auto_arima_model, h = 12)$mean)
?thetaf
# Theta Method
theta_model <- thetaf(univariate_time_series, h = 12)
mse(as.vector(univariate_time_series_test), predict(theta_model)$mean)
# Auto ETS
auto_ets_model <- ets(univariate_time_series, h = 12)
?ets
# Auto ETS
auto_ets_model <- ets(univariate_time_series)
mse(as.vector(univariate_time_series_test), forecast(auto_ets_model, h = 12)$mean)
# TBATS
tbats_model <- tbats(univariate_time_series, h = 12)
# TBATS
tbats_model <- tbats(univariate_time_series)
mse(as.vector(univariate_time_series_test), forecast(tbats_model, h = 12)$mean)
# Neural Network time series forecasts
nnetar_model <- nnetar(univariate_time_series, h = 12)
mse(as.vector(univariate_time_series_test), predict(nnetar_model)$mean)
?nnetar
mse(as.vector(univariate_time_series_test), forecast(nnetar_model, h = 12)$mean)
# Neural Network time series forecasts
nnetar_model <- nnetar(univariate_time_series)
mse(as.vector(univariate_time_series_test), forecast(nnetar_model, h = 12)$mean)
nnetar_model$subset
nnetar_model$model
# Naive model with 0 forecasts
naive0_model <- rep(0, 12)
mse(as.vector(univariate_time_series_test), naive0_model)
forecast(ugarch_spec, data = univariate_time_series)
# ARMA 0, 0 with GARCH 1, 1 student t errors
ugarch_spec_t <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 0),
nclude.mean = TRUE,
external.regressors = NULL),
distribution.model = "std")
forecast(ugarch_spec, data = univariate_time_series)
# ARMA 0, 0 with GARCH 1, 1 student t errors
ugarch_spec_t <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 0),
nclude.mean = TRUE,
external.regressors = NULL),
distribution.model = "std")
forecast(ugarch_spec_t, data = univariate_time_series)
?ugarchspec
# ARMA 0, 0 with GARCH 1, 1 student t errors
ugarch_spec_t <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 0),
nclude.mean = TRUE,
external.regressors = NULL),
distribution.model = "std")
# ARMA 0, 0 with GARCH 1, 1 student t errors
ugarch_spec_t <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(0, 0),
include.mean = TRUE,
external.regressors = NULL),
distribution.model = "std")
forecast(ugarch_spec_t, data = univariate_time_series)
ugarch_spec_t_fit <- ugarchfit(ugarch_spec_t, data = univariate_time_series)
fitted(ugarch_spec_t_fit)
fpm(ugarch_spec_t_fit)
ugarchforecast(ugarch_spec_t_fit, n.ahead = 12)
?ugarchforecast
fpm(ugarchforecast(ugarch_spec_t_fit, n.ahead = 12))
?ugarchforecast
ugarchforecast(ugarch_spec_t_fit, n.ahead = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12)
fpm(ugarch_t_forecast)
plot(ugarch_t_forecast)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12, out.sample = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 1, out.sample = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 1)
plot(ugarch_t_forecast)
ugarch_spec_t_fit <- ugarchfit(ugarch_spec_t, data = univariate_time_series, out.sample = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 1)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12)
plot(ugarch_t_forecast)
# ARMA 0, 0 with GARCH 1, 1 student t errors
ugarch_spec_t <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(1, 1),
include.mean = TRUE,
external.regressors = NULL),
distribution.model = "std")
ugarch_spec_t_fit <- ugarchfit(ugarch_spec_t, data = univariate_time_series, out.sample = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12)
plot(ugarch_t_forecast)
ugarch_t_forecast
fitted(ugarch_t_forecast)
fitted(ugarch_t_forecast)[1, ]
plot(ugarch_t_forecast, which = 1)
plot(ugarch_t_forecast, which = 2)
# ARMA 1, 1 with GARCH 1, 1 gaussian errors
ugarch_spec <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(1, 1),
include.mean = TRUE,
external.regressors = NULL),
distribution.model = "norm")
ugarch_spec_fit <- ugarchfit(ugarch_spec_t, data = univariate_time_series, out.sample = 12)
ugarch_t_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12)
fitted(ugarch_forecast)[1, ]
ugarch_spec_fit <- ugarchfit(ugarch_spec_t, data = univariate_time_series, out.sample = 12)
ugarch_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12)
fitted(ugarch_forecast)[1, ]
plot(ugarch_forecast, which = 2)
show(ugarch_spec_fit)
# ARMA 1, 1 with GARCH 1, 1 gaussian errors
ugarch_spec <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE),
mean.model     = list(armaOrder = c(1, 1),
include.mean = TRUE,
external.regressors = NULL),
distribution.model = "norm")
ugarch_spec_fit <- ugarchfit(ugarch_spec, data = univariate_time_series, out.sample = 12)
ugarch_forecast <- ugarchforecast(ugarch_spec_t_fit, n.ahead = 12, n.roll = 12)
fitted(ugarch_forecast)[1, ]
plot(ugarch_forecast, which = 2)
show(ugarch_spec_fit)
?xga.train
library(xgboost)
install.packages("xgboost")
library(xgboost)
?xga.train
?xgb.train
?xgb.DMatrix
?attr
x <- 1:10
attr(x, "errors")
attr(x, "errors") <- 2:11
x
fforma_param <- list(max_depth=4, eta=0.019*6, nthread = 2, silent=0,
objective=combi_softmax_square,
num_class=nrow(dataset[[1]]$ff),
subsample=0.9,
colsample_bytree=0.6)
devtools::install_github("robjhyndman/M4metalearning")
install.packages("rlang")
install.packages("rlang")
