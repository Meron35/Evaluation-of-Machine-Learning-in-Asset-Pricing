knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(datasets)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(datasets)
library(mlbench)
#Get data
data("BostonHousing2")
#Get data
data("BostonHousing2")
dim(BostonHousing2)
head(BostonHousing2)
summary(BostonHousing2)
library(ggplot2)
View(BostonHousing2)
?seq_len
#Training and Test Sets
train_test <- function(df, seed, split){
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
}
train_test(BostonHousing2, 1337, 0.8)
#Training and Test Sets
train_test <- function(df, seed, split){
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
train
test
}
train_test(BostonHousing2, 1337, 0.8)
#Training and Test Sets
seed <- 1337
split <- 0.8
df <- BostonHousing2
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
View(test)
library(ggpairs)
library(GGally)
#Data Exploration
ggpairs(train)
View(train)
BostonHousing2 <- BostonHousing2 %>%
select(-medv)
#Training and Test Sets
seed <- 1337
split <- 0.8
df <- BostonHousing2
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
#Linear Model
Linear_model <- glm(medv ~., data =  train)
#Linear Model
Linear_model <- glm(cmedv ~., data = train)
summary(Linear_model)
#Linear Model
lm_model <- lm(cmedv ~., data = train)
summary(lm_model)
glm_model <- glm(cmedv ~., data = train)
summary(glm_model)
library(glmnet)
?glmnet
?model.matrix
BostonHousing2_num <- model.matrix(cmedv ~., BostonHousing2)
BostonHousing2_num <- model.matrix(~., BostonHousing2)
BostonHousing2_num <- model.matrix(~ ., BostonHousing2)
library(caret)
BostonHousing2_dmy <- dummyVars(~., data = BostonHousing2)
View(BostonHousing2_dmy)
BostonHousing2_dmy2 <- predict(BostonHousing2_dmy, newdata = BostonHousing2)
BostonHousing2_dmy2 <- data.frame(predict(BostonHousing2_dmy, newdata = BostonHousing2))
View(BostonHousing2_dmy2)
#Training and Test Sets
seed <- 1337
split <- 0.8
df <- BostonHousing2_dmy2
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
#Linear Model
lm_model <- lm(cmedv ~., data = train)
summary(lm_model)
glm_model <- glm(cmedv ~., data = train)
summary(glm_model)
BostonHousing2_dmy2_y <- BostonHousing2_dmy2[,cmedv]
View(BostonHousing2_dmy2)
BostonHousing2_dmy2_y <- BostonHousing2_dmy2 %>%
select(cmedv)
BostonHousing2_dmy2_x <- BostonHousing2_dmy2 %>%
select(-cmedv)
#Data Prep
train_y <- train %>%
select(cmedv)
train_x <- train %>%
select(-cmedv)
?glmnet
?cv.glmnet
?rnorm
?cv.glmnet
x <- c(1:100)
y <- c(1:100)
?ronorm
?rnorm
#Simulation
set.seed(1337)
x <- c(1:100)
y <- c(1:100)
x[1] <- 0
for(i in 1:100){
x[i] + rnorm(1, mean = 0, sd = 1)
}
x
for(i in 1:99){
x[i+1] <- x[i] + rnorm(1, mean = 0, sd = 1)
}
x
y = x^2
y
corr(x, y)
cor(x, y)
y = log(x)
y = log(x+0.001)
cor(x, y)
y = exp(x)
cor(x, y)
ggplot(aes(x = x, y = y)) +
geom_line
data.frame(x = x, y = y)
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line
View(xy)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
y = sin(x)
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
y = tan(x)
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
#Simulation
set.seed(1337)
x <- c(1:100)
y <- c(1:100)
x[1] <- 0
for(i in 1:99){
x[i+1] <- x[i] + rnorm(1, mean = 0, sd = 1)
}
y = tan(x)
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
acf(y)
?cv.glmnet
#Elasticnet
elasticnet <- cv.glmnet(train_x, train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
View(train_y)
#Elasticnet
elasticnet <- cv.glmnet(train_x, as.numeric(train_y), family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(as.matrix(train_x), train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(as.matrix(train_x), as.numeric(train_y), family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(data.matrix(train_x), as.numeric(train_y), family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(data.matrix(train_x), train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(cmedv ~ ., data = BostonHousing2_dmy2, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(as.matrix(train_x), y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(as.matrix(train_x), train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
x[i] <- rnorm(1, mean = 0, sd = 1)
#Simulation
set.seed(1337)
x <- c(1:100)
y <- c(1:100)
x[1] <- 0
for(i in 1:100){
x[i] <- rnorm(1, mean = 0, sd = 1)
}
y = tan(x)
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
#Simulation
set.seed(1337)
x <- c(1:100)
y <- c(1:100)
x[1] <- 0
for(i in 1:100){
x[i] <- rnorm(1, mean = 0, sd = 1)
}
y = x^2
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
acf(y)
View(xy)
y = sin(x)
#Simulation
set.seed(1337)
x <- c(1:100)
y <- c(1:100)
x[1] <- 0
for(i in 1:100){
x[i] <- rnorm(1, mean = 0, sd = 1)
}
y = sin(x)
xy <- data.frame(x = x, y = y)
ggplot(aes(x = x, y = y), data = xy) +
geom_line()
cor(x, y)
acf(y)
?glmnet
#Elasticnet
elasticnet <- cv.glmnet(as.matrix(train_x), train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Elasticnet
elasticnet <- cv.glmnet(train_x, train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
summary(train_x)
summary(train_y)
typeof(train_x)
train_x <- train %>%
select(-cmedv)
typeof(train_x)
#Elasticnet
elasticnet <- cv.glmnet(list.as.matrix(train_x), train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
#Get data
data("BostonHousing2")
dim(BostonHousing2)
head(BostonHousing2)
summary(BostonHousing2)
BostonHousing2 <- BostonHousing2 %>%
select(-medv)
BostonHousing2_dmy <- dummyVars(~., data = BostonHousing2)
BostonHousing2_dmy2 <- data.frame(predict(BostonHousing2_dmy, newdata = BostonHousing2))
typeof(BostonHousing2_dmy2)
BostonHousing2_dmy2 <- predict(BostonHousing2_dmy, newdata = BostonHousing2)
#Get data
data("BostonHousing2")
dim(BostonHousing2)
head(BostonHousing2)
summary(BostonHousing2)
BostonHousing2 <- BostonHousing2 %>%
select(-medv)
BostonHousing2_dmy <- dummyVars(~., data = BostonHousing2, fullRank = T)
BostonHousing2_dmy2 <- data.frame(predict(BostonHousing2_dmy, newdata = BostonHousing2))
View(BostonHousing2_dmy2)
typeof(BostonHousing2_dmy2)
BostonHousing2_dmy2 <- as.matrix(BostonHousing2_dmy2)
View(BostonHousing2_dmy2)
#Data Prep
train_y <- train %>%
select(cmedv)
train_x <- train %>%
select(-cmedv)
#Training and Test Sets
seed <- 1337
split <- 0.8
df <- BostonHousing2_dmy2
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
#Data Prep
train_y <- train %>%
select(cmedv)
train_y <- train[95,]
train_y <- train[95]
#Training and Test Sets
seed <- 1337
split <- 0.8
df <- BostonHousing2_dmy2
set.seed(seed)
smp_size <- floor(nrow(df)*split)
sample <- sample.int(n = nrow(df), size = floor(split*nrow(df)), replace = F)
train <- df[sample, ]
test <- df[-sample, ]
train_y <- train[,95]
train_x <- train[,-95]
View(train_x)
#Elasticnet
elasticnet <- cv.glmnet(train_x, train_y, family = "gaussian",
alpha = 0.5, standardize = TRUE,
nfolds = 100, type.measure = "mse")
summary(elasticnet)
elasticnet$lambda
plot(elasticnet$lambda)
?cv.glmnet
plot(elasticnet$lambda)
plot(elasticnet$lambda.1se)
plot(elasticnet$lambda.min)
plot(elasticnet)
NeuralNet <- keras_model_sequential()
NeuralNet <- keras_model_sequential()
?keras_model_sequential
##NeuralNet
NeuralNet <- keras_model_sequential()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(keras)
library(datasets)
library(mlbench)
library(ggplot2)
library(GGally)
library(glmnet)
library(caret)
##NeuralNet
NeuralNet <- keras_model_sequential()
?keras_model_sequential
